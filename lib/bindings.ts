         // This file was generated by [tauri-specta](https://github.com/oscartbeaumont/tauri-specta). Do not edit this file manually.

         export const commands = {
async greet() : Promise<string> {
return await TAURI_INVOKE("plugin:tauri-specta|greet");
},
async removeStore(store: string) : Promise<null> {
return await TAURI_INVOKE("plugin:tauri-specta|remove_store", { store });
},
async getStore(store: string) : Promise<string> {
return await TAURI_INVOKE("plugin:tauri-specta|get_store", { store });
},
async updateStore(store: string, value: string) : Promise<null> {
return await TAURI_INVOKE("plugin:tauri-specta|update_store", { store, value });
}
}

export const events = __makeEvents__<{
settingsStoreState: SettingsStoreState,
translationStoreState: TranslationStoreState,
locationStoreState: LocationStoreState
}>({
settingsStoreState: "plugin:tauri-specta:settings-store-state",
translationStoreState: "plugin:tauri-specta:translation-store-state",
locationStoreState: "plugin:tauri-specta:location-store-state"
})

/** user-defined types **/

export type Location = { name: string; path: string; is_favourite: boolean; num_of_keys: number; num_of_untranslated_keys: number; added_at: string }
export type LocationStoreState = { locations: Location[] }
export type Notifications = { file_changes: boolean; finished_translation: boolean; finished_scan: boolean }
export type SettingsStoreState = { nav_open: boolean; theme: Theme; notifications_enabled: boolean; enabled_notification_types: Notifications; translation_settings: TranslationSettings }
export type Theme = "light" | "dark"
export type TranslationEntry = { key: string; value: string; translations: { [key in string]: string }; in_use: boolean }
export type TranslationSettings = { translate_new_strings: boolean; translate_updated_strings: boolean; default_language: string; translation_command: string }
export type TranslationStoreState = { languages: string[]; translation_entries: TranslationEntry[] }

/** tauri-specta globals **/

         import { invoke as TAURI_INVOKE } from "@tauri-apps/api";
import * as TAURI_API_EVENT from "@tauri-apps/api/event";
import { type WebviewWindowHandle as __WebviewWindowHandle__ } from "@tauri-apps/api/window";

type __EventObj__<T> = {
  listen: (
    cb: TAURI_API_EVENT.EventCallback<T>
  ) => ReturnType<typeof TAURI_API_EVENT.listen<T>>;
  once: (
    cb: TAURI_API_EVENT.EventCallback<T>
  ) => ReturnType<typeof TAURI_API_EVENT.once<T>>;
  emit: T extends null
    ? (payload?: T) => ReturnType<typeof TAURI_API_EVENT.emit>
    : (payload: T) => ReturnType<typeof TAURI_API_EVENT.emit>;
};

type __Result__<T, E> =
  | { status: "ok"; data: T }
  | { status: "error"; error: E };

function __makeEvents__<T extends Record<string, any>>(
  mappings: Record<keyof T, string>
) {
  return new Proxy(
    {} as unknown as {
      [K in keyof T]: __EventObj__<T[K]> & {
        (handle: __WebviewWindowHandle__): __EventObj__<T[K]>;
      };
    },
    {
      get: (_, event) => {
        const name = mappings[event as keyof T];

        return new Proxy((() => {}) as any, {
          apply: (_, __, [window]: [__WebviewWindowHandle__]) => ({
            listen: (arg: any) => window.listen(name, arg),
            once: (arg: any) => window.once(name, arg),
            emit: (arg: any) => window.emit(name, arg),
          }),
          get: (_, command: keyof __EventObj__<any>) => {
            switch (command) {
              case "listen":
                return (arg: any) => TAURI_API_EVENT.listen(name, arg);
              case "once":
                return (arg: any) => TAURI_API_EVENT.once(name, arg);
              case "emit":
                return (arg: any) => TAURI_API_EVENT.emit(name, arg);
            }
          },
        });
      },
    }
  );
}

     