// Code generated by Prisma Client Rust. DO NOT EDIT

pub static DATAMODEL_STR: &'static str =
    include_str!("/Users/marius/Developer/Github/hero/crates/db/prisma/schema.prisma");
static DATABASE_STR: &'static str = "sqlite";
use ::prisma_client_rust::migrations::include_dir;
pub static MIGRATIONS_DIR: &::prisma_client_rust::migrations::include_dir::Dir = &::prisma_client_rust::migrations::include_dir::include_dir!(
    "/Users/marius/Developer/Github/hero/crates/db/prisma/migrations"
);
pub async fn new_client() -> Result<PrismaClient, ::prisma_client_rust::NewClientError> {
    PrismaClient::_builder().build().await
}
pub async fn new_client_with_url(
    url: &str,
) -> Result<PrismaClient, ::prisma_client_rust::NewClientError> {
    PrismaClient::_builder()
        .with_url(url.to_string())
        .build()
        .await
}
pub mod settings {
    use super::_prisma::*;
    use super::*;
    pub const NAME: &str = "Settings";
    pub mod id {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "id";
        pub struct Set(pub i32);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetId(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::Id(v)
            }
        }
        pub fn set<T: From<Set>>(value: i32) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::Id(direction)
        }
        pub fn equals<T: From<UniqueWhereParam>>(value: i32) -> T {
            UniqueWhereParam::IdEquals(value).into()
        }
        ::prisma_client_rust::scalar_where_param_fns!(_prisma::read_filters::IntFilter, Id, {
            fn in_vec(_: Vec<i32>) -> InVec;
            fn not_in_vec(_: Vec<i32>) -> NotInVec;
            fn lt(_: i32) -> Lt;
            fn lte(_: i32) -> Lte;
            fn gt(_: i32) -> Gt;
            fn gte(_: i32) -> Gte;
            fn not(_: i32) -> Not;
        });
        pub fn increment(value: i32) -> SetParam {
            SetParam::IncrementId(value)
        }
        pub fn decrement(value: i32) -> SetParam {
            SetParam::DecrementId(value)
        }
        pub fn multiply(value: i32) -> SetParam {
            SetParam::MultiplyId(value)
        }
        pub fn divide(value: i32) -> SetParam {
            SetParam::DivideId(value)
        }
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::Id(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::Id(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod nav_open {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "nav_open";
        pub struct Set(pub bool);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetNavOpen(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::NavOpen(v)
            }
        }
        pub fn set<T: From<Set>>(value: bool) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::NavOpen(direction)
        }
        pub fn equals(value: bool) -> WhereParam {
            WhereParam::NavOpen(_prisma::read_filters::BoolFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(
            _prisma::read_filters::BoolFilter,
            NavOpen,
            {
                fn not(_: bool) -> Not;
            }
        );
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::NavOpen(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::NavOpen(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod theme {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "theme";
        pub struct Set(pub String);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetTheme(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::Theme(v)
            }
        }
        pub fn set<T: From<Set>>(value: String) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::Theme(direction)
        }
        pub fn equals(value: String) -> WhereParam {
            WhereParam::Theme(_prisma::read_filters::StringFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(
            _prisma::read_filters::StringFilter,
            Theme,
            {
                fn in_vec(_: Vec<String>) -> InVec;
                fn not_in_vec(_: Vec<String>) -> NotInVec;
                fn lt(_: String) -> Lt;
                fn lte(_: String) -> Lte;
                fn gt(_: String) -> Gt;
                fn gte(_: String) -> Gte;
                fn contains(_: String) -> Contains;
                fn starts_with(_: String) -> StartsWith;
                fn ends_with(_: String) -> EndsWith;
                fn not(_: String) -> Not;
            }
        );
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::Theme(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::Theme(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod notifications_enabled {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "notifications_enabled";
        pub struct Set(pub bool);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetNotificationsEnabled(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::NotificationsEnabled(v)
            }
        }
        pub fn set<T: From<Set>>(value: bool) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::NotificationsEnabled(direction)
        }
        pub fn equals(value: bool) -> WhereParam {
            WhereParam::NotificationsEnabled(_prisma::read_filters::BoolFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(
            _prisma::read_filters::BoolFilter,
            NotificationsEnabled,
            {
                fn not(_: bool) -> Not;
            }
        );
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::NotificationsEnabled(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::NotificationsEnabled(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod toast_rich_colors {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "toast_rich_colors";
        pub struct Set(pub bool);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetToastRichColors(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::ToastRichColors(v)
            }
        }
        pub fn set<T: From<Set>>(value: bool) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::ToastRichColors(direction)
        }
        pub fn equals(value: bool) -> WhereParam {
            WhereParam::ToastRichColors(_prisma::read_filters::BoolFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(
            _prisma::read_filters::BoolFilter,
            ToastRichColors,
            {
                fn not(_: bool) -> Not;
            }
        );
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::ToastRichColors(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::ToastRichColors(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod notification_file_changes {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "notification_file_changes";
        pub struct Set(pub bool);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetNotificationFileChanges(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::NotificationFileChanges(v)
            }
        }
        pub fn set<T: From<Set>>(value: bool) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::NotificationFileChanges(direction)
        }
        pub fn equals(value: bool) -> WhereParam {
            WhereParam::NotificationFileChanges(_prisma::read_filters::BoolFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(
            _prisma::read_filters::BoolFilter,
            NotificationFileChanges,
            {
                fn not(_: bool) -> Not;
            }
        );
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::NotificationFileChanges(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::NotificationFileChanges(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod notification_finished_translation {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "notification_finished_translation";
        pub struct Set(pub bool);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetNotificationFinishedTranslation(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::NotificationFinishedTranslation(v)
            }
        }
        pub fn set<T: From<Set>>(value: bool) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::NotificationFinishedTranslation(direction)
        }
        pub fn equals(value: bool) -> WhereParam {
            WhereParam::NotificationFinishedTranslation(_prisma::read_filters::BoolFilter::Equals(
                value,
            ))
        }
        ::prisma_client_rust::scalar_where_param_fns!(
            _prisma::read_filters::BoolFilter,
            NotificationFinishedTranslation,
            {
                fn not(_: bool) -> Not;
            }
        );
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::NotificationFinishedTranslation(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::NotificationFinishedTranslation(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod finished_scan {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "finished_scan";
        pub struct Set(pub bool);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetFinishedScan(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::FinishedScan(v)
            }
        }
        pub fn set<T: From<Set>>(value: bool) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::FinishedScan(direction)
        }
        pub fn equals(value: bool) -> WhereParam {
            WhereParam::FinishedScan(_prisma::read_filters::BoolFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(
            _prisma::read_filters::BoolFilter,
            FinishedScan,
            {
                fn not(_: bool) -> Not;
            }
        );
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::FinishedScan(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::FinishedScan(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod translate_new_strings {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "translate_new_strings";
        pub struct Set(pub bool);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetTranslateNewStrings(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::TranslateNewStrings(v)
            }
        }
        pub fn set<T: From<Set>>(value: bool) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::TranslateNewStrings(direction)
        }
        pub fn equals(value: bool) -> WhereParam {
            WhereParam::TranslateNewStrings(_prisma::read_filters::BoolFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(
            _prisma::read_filters::BoolFilter,
            TranslateNewStrings,
            {
                fn not(_: bool) -> Not;
            }
        );
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::TranslateNewStrings(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::TranslateNewStrings(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod translate_updated_strings {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "translate_updated_strings";
        pub struct Set(pub bool);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetTranslateUpdatedStrings(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::TranslateUpdatedStrings(v)
            }
        }
        pub fn set<T: From<Set>>(value: bool) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::TranslateUpdatedStrings(direction)
        }
        pub fn equals(value: bool) -> WhereParam {
            WhereParam::TranslateUpdatedStrings(_prisma::read_filters::BoolFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(
            _prisma::read_filters::BoolFilter,
            TranslateUpdatedStrings,
            {
                fn not(_: bool) -> Not;
            }
        );
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::TranslateUpdatedStrings(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::TranslateUpdatedStrings(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod default_language {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "default_language";
        pub struct Set(pub String);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetDefaultLanguage(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::DefaultLanguage(v)
            }
        }
        pub fn set<T: From<Set>>(value: String) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::DefaultLanguage(direction)
        }
        pub fn equals(value: String) -> WhereParam {
            WhereParam::DefaultLanguage(_prisma::read_filters::StringFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(
            _prisma::read_filters::StringFilter,
            DefaultLanguage,
            {
                fn in_vec(_: Vec<String>) -> InVec;
                fn not_in_vec(_: Vec<String>) -> NotInVec;
                fn lt(_: String) -> Lt;
                fn lte(_: String) -> Lte;
                fn gt(_: String) -> Gt;
                fn gte(_: String) -> Gte;
                fn contains(_: String) -> Contains;
                fn starts_with(_: String) -> StartsWith;
                fn ends_with(_: String) -> EndsWith;
                fn not(_: String) -> Not;
            }
        );
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::DefaultLanguage(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::DefaultLanguage(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod translation_command {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "translation_command";
        pub struct Set(pub String);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetTranslationCommand(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::TranslationCommand(v)
            }
        }
        pub fn set<T: From<Set>>(value: String) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::TranslationCommand(direction)
        }
        pub fn equals(value: String) -> WhereParam {
            WhereParam::TranslationCommand(_prisma::read_filters::StringFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(
            _prisma::read_filters::StringFilter,
            TranslationCommand,
            {
                fn in_vec(_: Vec<String>) -> InVec;
                fn not_in_vec(_: Vec<String>) -> NotInVec;
                fn lt(_: String) -> Lt;
                fn lte(_: String) -> Lte;
                fn gt(_: String) -> Gt;
                fn gte(_: String) -> Gte;
                fn contains(_: String) -> Contains;
                fn starts_with(_: String) -> StartsWith;
                fn ends_with(_: String) -> EndsWith;
                fn not(_: String) -> Not;
            }
        );
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::TranslationCommand(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::TranslationCommand(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod home_default_size_nav {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "home_default_size_nav";
        pub struct Set(pub i32);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetHomeDefaultSizeNav(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::HomeDefaultSizeNav(v)
            }
        }
        pub fn set<T: From<Set>>(value: i32) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::HomeDefaultSizeNav(direction)
        }
        pub fn equals(value: i32) -> WhereParam {
            WhereParam::HomeDefaultSizeNav(_prisma::read_filters::IntFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(
            _prisma::read_filters::IntFilter,
            HomeDefaultSizeNav,
            {
                fn in_vec(_: Vec<i32>) -> InVec;
                fn not_in_vec(_: Vec<i32>) -> NotInVec;
                fn lt(_: i32) -> Lt;
                fn lte(_: i32) -> Lte;
                fn gt(_: i32) -> Gt;
                fn gte(_: i32) -> Gte;
                fn not(_: i32) -> Not;
            }
        );
        pub fn increment(value: i32) -> SetParam {
            SetParam::IncrementHomeDefaultSizeNav(value)
        }
        pub fn decrement(value: i32) -> SetParam {
            SetParam::DecrementHomeDefaultSizeNav(value)
        }
        pub fn multiply(value: i32) -> SetParam {
            SetParam::MultiplyHomeDefaultSizeNav(value)
        }
        pub fn divide(value: i32) -> SetParam {
            SetParam::DivideHomeDefaultSizeNav(value)
        }
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::HomeDefaultSizeNav(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::HomeDefaultSizeNav(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod home_default_size_home {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "home_default_size_home";
        pub struct Set(pub i32);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetHomeDefaultSizeHome(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::HomeDefaultSizeHome(v)
            }
        }
        pub fn set<T: From<Set>>(value: i32) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::HomeDefaultSizeHome(direction)
        }
        pub fn equals(value: i32) -> WhereParam {
            WhereParam::HomeDefaultSizeHome(_prisma::read_filters::IntFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(
            _prisma::read_filters::IntFilter,
            HomeDefaultSizeHome,
            {
                fn in_vec(_: Vec<i32>) -> InVec;
                fn not_in_vec(_: Vec<i32>) -> NotInVec;
                fn lt(_: i32) -> Lt;
                fn lte(_: i32) -> Lte;
                fn gt(_: i32) -> Gt;
                fn gte(_: i32) -> Gte;
                fn not(_: i32) -> Not;
            }
        );
        pub fn increment(value: i32) -> SetParam {
            SetParam::IncrementHomeDefaultSizeHome(value)
        }
        pub fn decrement(value: i32) -> SetParam {
            SetParam::DecrementHomeDefaultSizeHome(value)
        }
        pub fn multiply(value: i32) -> SetParam {
            SetParam::MultiplyHomeDefaultSizeHome(value)
        }
        pub fn divide(value: i32) -> SetParam {
            SetParam::DivideHomeDefaultSizeHome(value)
        }
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::HomeDefaultSizeHome(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::HomeDefaultSizeHome(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod home_nav_collapsed {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "home_nav_collapsed";
        pub struct Set(pub bool);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetHomeNavCollapsed(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::HomeNavCollapsed(v)
            }
        }
        pub fn set<T: From<Set>>(value: bool) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::HomeNavCollapsed(direction)
        }
        pub fn equals(value: bool) -> WhereParam {
            WhereParam::HomeNavCollapsed(_prisma::read_filters::BoolFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(
            _prisma::read_filters::BoolFilter,
            HomeNavCollapsed,
            {
                fn not(_: bool) -> Not;
            }
        );
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::HomeNavCollapsed(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::HomeNavCollapsed(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod home_collapsed_nav_size {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "home_collapsed_nav_size";
        pub struct Set(pub i32);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetHomeCollapsedNavSize(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::HomeCollapsedNavSize(v)
            }
        }
        pub fn set<T: From<Set>>(value: i32) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::HomeCollapsedNavSize(direction)
        }
        pub fn equals(value: i32) -> WhereParam {
            WhereParam::HomeCollapsedNavSize(_prisma::read_filters::IntFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(
            _prisma::read_filters::IntFilter,
            HomeCollapsedNavSize,
            {
                fn in_vec(_: Vec<i32>) -> InVec;
                fn not_in_vec(_: Vec<i32>) -> NotInVec;
                fn lt(_: i32) -> Lt;
                fn lte(_: i32) -> Lte;
                fn gt(_: i32) -> Gt;
                fn gte(_: i32) -> Gte;
                fn not(_: i32) -> Not;
            }
        );
        pub fn increment(value: i32) -> SetParam {
            SetParam::IncrementHomeCollapsedNavSize(value)
        }
        pub fn decrement(value: i32) -> SetParam {
            SetParam::DecrementHomeCollapsedNavSize(value)
        }
        pub fn multiply(value: i32) -> SetParam {
            SetParam::MultiplyHomeCollapsedNavSize(value)
        }
        pub fn divide(value: i32) -> SetParam {
            SetParam::DivideHomeCollapsedNavSize(value)
        }
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::HomeCollapsedNavSize(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::HomeCollapsedNavSize(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub fn create(_params: Vec<SetParam>) -> (Vec<SetParam>) {
        (_params)
    }
    pub fn create_unchecked(_params: Vec<SetParam>) -> (Vec<SetParam>) {
        (_params)
    }
    #[macro_export]
    macro_rules ! _select_settings { ($ (($ ($ func_arg : ident : $ func_arg_ty : ty) , +) =>) ? $ module_name : ident { $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { # [allow (warnings)] pub mod $ module_name { crate :: prisma :: settings :: select ! (@ definitions ; $ module_name ; $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) +) ; use super :: * ; pub struct Selection (Vec < :: prisma_client_rust :: Selection >) ; impl :: prisma_client_rust :: SelectType for Selection { type Data = Data ; type ModelData = crate :: prisma :: settings :: Data ; fn to_selections (self) -> Vec < :: prisma_client_rust :: Selection > { self . 0 } } pub fn select ($ ($ ($ func_arg : $ func_arg_ty) , +) ?) -> Selection { Selection ([crate :: prisma :: settings :: select ! (@ selections_to_params ; : select { $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) + }) . into_iter () . map (| p | p . to_selection ()) . collect :: < Vec < _ >> () ,] . into_iter () . flatten () . collect :: < Vec < _ >> ()) } } } ; ({ $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { { crate :: prisma :: settings :: select ! (@ definitions ; ; $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) +) ; pub struct Selection (Vec < :: prisma_client_rust :: Selection >) ; impl :: prisma_client_rust :: SelectType for Selection { type Data = Data ; type ModelData = crate :: prisma :: settings :: Data ; fn to_selections (self) -> Vec < :: prisma_client_rust :: Selection > { self . 0 } } Selection ([crate :: prisma :: settings :: select ! (@ selections_to_params ; : select { $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) + }) . into_iter () . map (| p | p . to_selection ()) . collect :: < Vec < _ >> () ,] . into_iter () . flatten () . collect :: < Vec < _ >> ()) } } ; (@ definitions ; $ ($ module_name : ident) ? ; $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) +) => { # [allow (warnings)] enum Fields { id , nav_open , theme , notifications_enabled , toast_rich_colors , notification_file_changes , notification_finished_translation , finished_scan , translate_new_strings , translate_updated_strings , default_language , translation_command , home_default_size_nav , home_default_size_home , home_nav_collapsed , home_collapsed_nav_size } # [allow (warnings)] impl Fields { fn selections () { $ (let _ = Fields :: $ field ;) + } } const SPECTA_TYPE_NAME : & 'static str = prisma_client_rust :: macros :: to_pascal_case ! ($ ($ module_name) ?) ; crate :: prisma :: settings :: select ! (@ specta_data_struct ; pub struct Data { $ (# [specta (rename_from_path = crate :: prisma :: settings :: $ field :: NAME)] pub $ field : crate :: prisma :: settings :: select ! (@ field_type ; $ field $ (: $ selection_mode { $ ($ selections) + }) ?) ,) + } ; $ ($ module_name) ?) ; impl :: serde :: Serialize for Data { fn serialize < S > (& self , serializer : S) -> Result < S :: Ok , S :: Error > where S : :: serde :: Serializer , { use :: serde :: ser :: SerializeStruct ; let mut state = serializer . serialize_struct ("Data" , [$ (stringify ! ($ field) ,) +] . len ()) ? ; $ (state . serialize_field (crate :: prisma :: settings :: $ field :: NAME , & self . $ field) ? ;) * state . end () } } impl < 'de > :: serde :: Deserialize < 'de > for Data { fn deserialize < D > (deserializer : D) -> Result < Self , D :: Error > where D : :: serde :: Deserializer < 'de > , { # [allow (warnings)] enum Field { $ ($ field) , + , } impl < 'de > :: serde :: Deserialize < 'de > for Field { fn deserialize < D > (deserializer : D) -> Result < Field , D :: Error > where D : :: serde :: Deserializer < 'de > , { struct FieldVisitor ; impl < 'de > :: serde :: de :: Visitor < 'de > for FieldVisitor { type Value = Field ; fn expecting (& self , formatter : & mut :: std :: fmt :: Formatter) -> :: std :: fmt :: Result { formatter . write_str (& [$ (crate :: prisma :: settings :: $ field :: NAME) , + ,] . into_iter () . collect :: < Vec < _ >> () . join (", ")) } fn visit_str < E > (self , value : & str) -> Result < Field , E > where E : :: serde :: de :: Error , { match value { $ (crate :: prisma :: settings :: $ field :: NAME => Ok (Field :: $ field)) , * , _ => Err (:: serde :: de :: Error :: unknown_field (value , FIELDS)) , } } } deserializer . deserialize_identifier (FieldVisitor) } } struct DataVisitor ; impl < 'de > :: serde :: de :: Visitor < 'de > for DataVisitor { type Value = Data ; fn expecting (& self , formatter : & mut std :: fmt :: Formatter) -> std :: fmt :: Result { formatter . write_str ("struct Data") } fn visit_map < V > (self , mut map : V) -> Result < Data , V :: Error > where V : :: serde :: de :: MapAccess < 'de > , { $ (let mut $ field = None ;) * while let Some (key) = map . next_key () ? { match key { $ (Field :: $ field => { if $ field . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: settings :: $ field :: NAME)) ; } $ field = Some (map . next_value () ?) ; }) * } } $ (let $ field = $ field . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: settings :: $ field :: NAME)) ? ;) * Ok (Data { $ ($ field) , * }) } } const FIELDS : & 'static [& 'static str] = & ["id" , "nav_open" , "theme" , "notifications_enabled" , "toast_rich_colors" , "notification_file_changes" , "notification_finished_translation" , "finished_scan" , "translate_new_strings" , "translate_updated_strings" , "default_language" , "translation_command" , "home_default_size_nav" , "home_default_size_home" , "home_nav_collapsed" , "home_collapsed_nav_size"] ; deserializer . deserialize_struct ("Data" , FIELDS , DataVisitor) } } $ ($ (pub mod $ field { crate :: prisma :: settings :: $ selection_mode ! (@ field_module ; $ field : $ selection_mode { $ ($ selections) + }) ; }) ?) + } ; (@ field_type ; id) => { i32 } ; (@ field_type ; nav_open) => { bool } ; (@ field_type ; theme) => { String } ; (@ field_type ; notifications_enabled) => { bool } ; (@ field_type ; toast_rich_colors) => { bool } ; (@ field_type ; notification_file_changes) => { bool } ; (@ field_type ; notification_finished_translation) => { bool } ; (@ field_type ; finished_scan) => { bool } ; (@ field_type ; translate_new_strings) => { bool } ; (@ field_type ; translate_updated_strings) => { bool } ; (@ field_type ; default_language) => { String } ; (@ field_type ; translation_command) => { String } ; (@ field_type ; home_default_size_nav) => { i32 } ; (@ field_type ; home_default_size_home) => { i32 } ; (@ field_type ; home_nav_collapsed) => { bool } ; (@ field_type ; home_collapsed_nav_size) => { i32 } ; (@ field_type ; $ field : ident $ ($ tokens : tt) *) => { compile_error ! (stringify ! (Cannot include nonexistent relation $ field on model "Settings" , available relations are "id, nav_open, theme, notifications_enabled, toast_rich_colors, notification_file_changes, notification_finished_translation, finished_scan, translate_new_strings, translate_updated_strings, default_language, translation_command, home_default_size_nav, home_default_size_home, home_nav_collapsed, home_collapsed_nav_size")) } ; (@ field_module ; $ ($ tokens : tt) *) => { } ; (@ selection_field_to_selection_param ; id) => { Into :: < crate :: prisma :: settings :: SelectParam > :: into (crate :: prisma :: settings :: id :: Select) } ; (@ selection_field_to_selection_param ; nav_open) => { Into :: < crate :: prisma :: settings :: SelectParam > :: into (crate :: prisma :: settings :: nav_open :: Select) } ; (@ selection_field_to_selection_param ; theme) => { Into :: < crate :: prisma :: settings :: SelectParam > :: into (crate :: prisma :: settings :: theme :: Select) } ; (@ selection_field_to_selection_param ; notifications_enabled) => { Into :: < crate :: prisma :: settings :: SelectParam > :: into (crate :: prisma :: settings :: notifications_enabled :: Select) } ; (@ selection_field_to_selection_param ; toast_rich_colors) => { Into :: < crate :: prisma :: settings :: SelectParam > :: into (crate :: prisma :: settings :: toast_rich_colors :: Select) } ; (@ selection_field_to_selection_param ; notification_file_changes) => { Into :: < crate :: prisma :: settings :: SelectParam > :: into (crate :: prisma :: settings :: notification_file_changes :: Select) } ; (@ selection_field_to_selection_param ; notification_finished_translation) => { Into :: < crate :: prisma :: settings :: SelectParam > :: into (crate :: prisma :: settings :: notification_finished_translation :: Select) } ; (@ selection_field_to_selection_param ; finished_scan) => { Into :: < crate :: prisma :: settings :: SelectParam > :: into (crate :: prisma :: settings :: finished_scan :: Select) } ; (@ selection_field_to_selection_param ; translate_new_strings) => { Into :: < crate :: prisma :: settings :: SelectParam > :: into (crate :: prisma :: settings :: translate_new_strings :: Select) } ; (@ selection_field_to_selection_param ; translate_updated_strings) => { Into :: < crate :: prisma :: settings :: SelectParam > :: into (crate :: prisma :: settings :: translate_updated_strings :: Select) } ; (@ selection_field_to_selection_param ; default_language) => { Into :: < crate :: prisma :: settings :: SelectParam > :: into (crate :: prisma :: settings :: default_language :: Select) } ; (@ selection_field_to_selection_param ; translation_command) => { Into :: < crate :: prisma :: settings :: SelectParam > :: into (crate :: prisma :: settings :: translation_command :: Select) } ; (@ selection_field_to_selection_param ; home_default_size_nav) => { Into :: < crate :: prisma :: settings :: SelectParam > :: into (crate :: prisma :: settings :: home_default_size_nav :: Select) } ; (@ selection_field_to_selection_param ; home_default_size_home) => { Into :: < crate :: prisma :: settings :: SelectParam > :: into (crate :: prisma :: settings :: home_default_size_home :: Select) } ; (@ selection_field_to_selection_param ; home_nav_collapsed) => { Into :: < crate :: prisma :: settings :: SelectParam > :: into (crate :: prisma :: settings :: home_nav_collapsed :: Select) } ; (@ selection_field_to_selection_param ; home_collapsed_nav_size) => { Into :: < crate :: prisma :: settings :: SelectParam > :: into (crate :: prisma :: settings :: home_collapsed_nav_size :: Select) } ; (@ selection_field_to_selection_param ; $ ($ tokens : tt) *) => { compile_error ! (stringify ! ($ ($ tokens) *)) } ; (@ selections_to_params ; : $ macro_name : ident { $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { [$ (crate :: prisma :: settings :: $ macro_name ! (@ selection_field_to_selection_param ; $ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) ,) +] } ; (@ filters_to_args ;) => { vec ! [] } ; (@ filters_to_args ; $ ($ t : tt) *) => { $ ($ t) * } ; (@ field_serde_name ; id) => { "id" } ; (@ field_serde_name ; nav_open) => { "nav_open" } ; (@ field_serde_name ; theme) => { "theme" } ; (@ field_serde_name ; notifications_enabled) => { "notifications_enabled" } ; (@ field_serde_name ; toast_rich_colors) => { "toast_rich_colors" } ; (@ field_serde_name ; notification_file_changes) => { "notification_file_changes" } ; (@ field_serde_name ; notification_finished_translation) => { "notification_finished_translation" } ; (@ field_serde_name ; finished_scan) => { "finished_scan" } ; (@ field_serde_name ; translate_new_strings) => { "translate_new_strings" } ; (@ field_serde_name ; translate_updated_strings) => { "translate_updated_strings" } ; (@ field_serde_name ; default_language) => { "default_language" } ; (@ field_serde_name ; translation_command) => { "translation_command" } ; (@ field_serde_name ; home_default_size_nav) => { "home_default_size_nav" } ; (@ field_serde_name ; home_default_size_home) => { "home_default_size_home" } ; (@ field_serde_name ; home_nav_collapsed) => { "home_nav_collapsed" } ; (@ field_serde_name ; home_collapsed_nav_size) => { "home_collapsed_nav_size" } ; (@ specta_data_struct ; $ struct : item ;) => { # [allow (warnings)] # [derive (std :: fmt :: Debug , Clone)] # [derive (:: prisma_client_rust :: specta :: Type)] # [specta (rename_from_path = SPECTA_TYPE_NAME , crate = "prisma_client_rust::specta")] # [specta (inline)] $ struct } ; (@ specta_data_struct ; $ struct : item ; $ name : ident) => { # [allow (warnings)] # [derive (std :: fmt :: Debug , Clone)] # [derive (:: prisma_client_rust :: specta :: Type)] # [specta (rename_from_path = SPECTA_TYPE_NAME , crate = "prisma_client_rust::specta")] $ struct } ; }
    pub use _select_settings as select;
    pub enum SelectParam {
        Id(id::Select),
        NavOpen(nav_open::Select),
        Theme(theme::Select),
        NotificationsEnabled(notifications_enabled::Select),
        ToastRichColors(toast_rich_colors::Select),
        NotificationFileChanges(notification_file_changes::Select),
        NotificationFinishedTranslation(notification_finished_translation::Select),
        FinishedScan(finished_scan::Select),
        TranslateNewStrings(translate_new_strings::Select),
        TranslateUpdatedStrings(translate_updated_strings::Select),
        DefaultLanguage(default_language::Select),
        TranslationCommand(translation_command::Select),
        HomeDefaultSizeNav(home_default_size_nav::Select),
        HomeDefaultSizeHome(home_default_size_home::Select),
        HomeNavCollapsed(home_nav_collapsed::Select),
        HomeCollapsedNavSize(home_collapsed_nav_size::Select),
    }
    impl SelectParam {
        pub fn to_selection(self) -> ::prisma_client_rust::Selection {
            match self {
                Self::Id(data) => data.to_selection(),
                Self::NavOpen(data) => data.to_selection(),
                Self::Theme(data) => data.to_selection(),
                Self::NotificationsEnabled(data) => data.to_selection(),
                Self::ToastRichColors(data) => data.to_selection(),
                Self::NotificationFileChanges(data) => data.to_selection(),
                Self::NotificationFinishedTranslation(data) => data.to_selection(),
                Self::FinishedScan(data) => data.to_selection(),
                Self::TranslateNewStrings(data) => data.to_selection(),
                Self::TranslateUpdatedStrings(data) => data.to_selection(),
                Self::DefaultLanguage(data) => data.to_selection(),
                Self::TranslationCommand(data) => data.to_selection(),
                Self::HomeDefaultSizeNav(data) => data.to_selection(),
                Self::HomeDefaultSizeHome(data) => data.to_selection(),
                Self::HomeNavCollapsed(data) => data.to_selection(),
                Self::HomeCollapsedNavSize(data) => data.to_selection(),
            }
        }
    }
    #[macro_export]
    macro_rules ! _include_settings { ($ (($ ($ func_arg : ident : $ func_arg_ty : ty) , +) =>) ? $ module_name : ident { $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { # [allow (warnings)] pub mod $ module_name { crate :: prisma :: settings :: include ! (@ definitions ; $ module_name ; $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) +) ; use super :: * ; pub struct Selection (Vec < :: prisma_client_rust :: Selection >) ; impl :: prisma_client_rust :: IncludeType for Selection { type Data = Data ; type ModelData = crate :: prisma :: settings :: Data ; fn to_selections (self) -> Vec < :: prisma_client_rust :: Selection > { self . 0 } } pub fn include ($ ($ ($ func_arg : $ func_arg_ty) , +) ?) -> Selection { Selection ([crate :: prisma :: settings :: include ! (@ selections_to_params ; : include { $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) + }) . into_iter () . map (| p | p . to_selection ()) . collect :: < Vec < _ >> () , < crate :: prisma :: settings :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections ()] . into_iter () . flatten () . collect :: < Vec < _ >> ()) } } } ; ({ $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { { crate :: prisma :: settings :: include ! (@ definitions ; ; $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) +) ; pub struct Selection (Vec < :: prisma_client_rust :: Selection >) ; impl :: prisma_client_rust :: IncludeType for Selection { type Data = Data ; type ModelData = crate :: prisma :: settings :: Data ; fn to_selections (self) -> Vec < :: prisma_client_rust :: Selection > { self . 0 } } Selection ([crate :: prisma :: settings :: include ! (@ selections_to_params ; : include { $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) + }) . into_iter () . map (| p | p . to_selection ()) . collect :: < Vec < _ >> () , < crate :: prisma :: settings :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections ()] . into_iter () . flatten () . collect :: < Vec < _ >> ()) } } ; (@ definitions ; $ ($ module_name : ident) ? ; $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) +) => { # [allow (warnings)] enum Fields { } # [allow (warnings)] impl Fields { fn selections () { $ (let _ = Fields :: $ field ;) + } } const SPECTA_TYPE_NAME : & 'static str = prisma_client_rust :: macros :: to_pascal_case ! ($ ($ module_name) ?) ; crate :: prisma :: settings :: include ! (@ specta_data_struct ; pub struct Data { # [specta (rename_from_path = crate :: prisma :: settings :: id :: NAME)] pub id : i32 , # [specta (rename_from_path = crate :: prisma :: settings :: nav_open :: NAME)] pub nav_open : bool , # [specta (rename_from_path = crate :: prisma :: settings :: theme :: NAME)] pub theme : String , # [specta (rename_from_path = crate :: prisma :: settings :: notifications_enabled :: NAME)] pub notifications_enabled : bool , # [specta (rename_from_path = crate :: prisma :: settings :: toast_rich_colors :: NAME)] pub toast_rich_colors : bool , # [specta (rename_from_path = crate :: prisma :: settings :: notification_file_changes :: NAME)] pub notification_file_changes : bool , # [specta (rename_from_path = crate :: prisma :: settings :: notification_finished_translation :: NAME)] pub notification_finished_translation : bool , # [specta (rename_from_path = crate :: prisma :: settings :: finished_scan :: NAME)] pub finished_scan : bool , # [specta (rename_from_path = crate :: prisma :: settings :: translate_new_strings :: NAME)] pub translate_new_strings : bool , # [specta (rename_from_path = crate :: prisma :: settings :: translate_updated_strings :: NAME)] pub translate_updated_strings : bool , # [specta (rename_from_path = crate :: prisma :: settings :: default_language :: NAME)] pub default_language : String , # [specta (rename_from_path = crate :: prisma :: settings :: translation_command :: NAME)] pub translation_command : String , # [specta (rename_from_path = crate :: prisma :: settings :: home_default_size_nav :: NAME)] pub home_default_size_nav : i32 , # [specta (rename_from_path = crate :: prisma :: settings :: home_default_size_home :: NAME)] pub home_default_size_home : i32 , # [specta (rename_from_path = crate :: prisma :: settings :: home_nav_collapsed :: NAME)] pub home_nav_collapsed : bool , # [specta (rename_from_path = crate :: prisma :: settings :: home_collapsed_nav_size :: NAME)] pub home_collapsed_nav_size : i32 , $ (# [specta (rename_from_path = crate :: prisma :: settings :: $ field :: NAME)] pub $ field : crate :: prisma :: settings :: include ! (@ field_type ; $ field $ (: $ selection_mode { $ ($ selections) + }) ?) ,) + } ; $ ($ module_name) ?) ; impl :: serde :: Serialize for Data { fn serialize < S > (& self , serializer : S) -> Result < S :: Ok , S :: Error > where S : :: serde :: Serializer , { use :: serde :: ser :: SerializeStruct ; let mut state = serializer . serialize_struct ("Data" , [$ (stringify ! ($ field) ,) + stringify ! (id) , stringify ! (nav_open) , stringify ! (theme) , stringify ! (notifications_enabled) , stringify ! (toast_rich_colors) , stringify ! (notification_file_changes) , stringify ! (notification_finished_translation) , stringify ! (finished_scan) , stringify ! (translate_new_strings) , stringify ! (translate_updated_strings) , stringify ! (default_language) , stringify ! (translation_command) , stringify ! (home_default_size_nav) , stringify ! (home_default_size_home) , stringify ! (home_nav_collapsed) , stringify ! (home_collapsed_nav_size)] . len ()) ? ; $ (state . serialize_field (crate :: prisma :: settings :: $ field :: NAME , & self . $ field) ? ;) * state . serialize_field (crate :: prisma :: settings :: id :: NAME , & self . id) ? ; state . serialize_field (crate :: prisma :: settings :: nav_open :: NAME , & self . nav_open) ? ; state . serialize_field (crate :: prisma :: settings :: theme :: NAME , & self . theme) ? ; state . serialize_field (crate :: prisma :: settings :: notifications_enabled :: NAME , & self . notifications_enabled) ? ; state . serialize_field (crate :: prisma :: settings :: toast_rich_colors :: NAME , & self . toast_rich_colors) ? ; state . serialize_field (crate :: prisma :: settings :: notification_file_changes :: NAME , & self . notification_file_changes) ? ; state . serialize_field (crate :: prisma :: settings :: notification_finished_translation :: NAME , & self . notification_finished_translation) ? ; state . serialize_field (crate :: prisma :: settings :: finished_scan :: NAME , & self . finished_scan) ? ; state . serialize_field (crate :: prisma :: settings :: translate_new_strings :: NAME , & self . translate_new_strings) ? ; state . serialize_field (crate :: prisma :: settings :: translate_updated_strings :: NAME , & self . translate_updated_strings) ? ; state . serialize_field (crate :: prisma :: settings :: default_language :: NAME , & self . default_language) ? ; state . serialize_field (crate :: prisma :: settings :: translation_command :: NAME , & self . translation_command) ? ; state . serialize_field (crate :: prisma :: settings :: home_default_size_nav :: NAME , & self . home_default_size_nav) ? ; state . serialize_field (crate :: prisma :: settings :: home_default_size_home :: NAME , & self . home_default_size_home) ? ; state . serialize_field (crate :: prisma :: settings :: home_nav_collapsed :: NAME , & self . home_nav_collapsed) ? ; state . serialize_field (crate :: prisma :: settings :: home_collapsed_nav_size :: NAME , & self . home_collapsed_nav_size) ? ; state . end () } } impl < 'de > :: serde :: Deserialize < 'de > for Data { fn deserialize < D > (deserializer : D) -> Result < Self , D :: Error > where D : :: serde :: Deserializer < 'de > , { # [allow (warnings)] enum Field { $ ($ field) , + , id , nav_open , theme , notifications_enabled , toast_rich_colors , notification_file_changes , notification_finished_translation , finished_scan , translate_new_strings , translate_updated_strings , default_language , translation_command , home_default_size_nav , home_default_size_home , home_nav_collapsed , home_collapsed_nav_size } impl < 'de > :: serde :: Deserialize < 'de > for Field { fn deserialize < D > (deserializer : D) -> Result < Field , D :: Error > where D : :: serde :: Deserializer < 'de > , { struct FieldVisitor ; impl < 'de > :: serde :: de :: Visitor < 'de > for FieldVisitor { type Value = Field ; fn expecting (& self , formatter : & mut :: std :: fmt :: Formatter) -> :: std :: fmt :: Result { formatter . write_str (& [$ (crate :: prisma :: settings :: $ field :: NAME) , + , crate :: prisma :: settings :: id :: NAME , crate :: prisma :: settings :: nav_open :: NAME , crate :: prisma :: settings :: theme :: NAME , crate :: prisma :: settings :: notifications_enabled :: NAME , crate :: prisma :: settings :: toast_rich_colors :: NAME , crate :: prisma :: settings :: notification_file_changes :: NAME , crate :: prisma :: settings :: notification_finished_translation :: NAME , crate :: prisma :: settings :: finished_scan :: NAME , crate :: prisma :: settings :: translate_new_strings :: NAME , crate :: prisma :: settings :: translate_updated_strings :: NAME , crate :: prisma :: settings :: default_language :: NAME , crate :: prisma :: settings :: translation_command :: NAME , crate :: prisma :: settings :: home_default_size_nav :: NAME , crate :: prisma :: settings :: home_default_size_home :: NAME , crate :: prisma :: settings :: home_nav_collapsed :: NAME , crate :: prisma :: settings :: home_collapsed_nav_size :: NAME] . into_iter () . collect :: < Vec < _ >> () . join (", ")) } fn visit_str < E > (self , value : & str) -> Result < Field , E > where E : :: serde :: de :: Error , { match value { $ (crate :: prisma :: settings :: $ field :: NAME => Ok (Field :: $ field)) , * , crate :: prisma :: settings :: id :: NAME => Ok (Field :: id) , crate :: prisma :: settings :: nav_open :: NAME => Ok (Field :: nav_open) , crate :: prisma :: settings :: theme :: NAME => Ok (Field :: theme) , crate :: prisma :: settings :: notifications_enabled :: NAME => Ok (Field :: notifications_enabled) , crate :: prisma :: settings :: toast_rich_colors :: NAME => Ok (Field :: toast_rich_colors) , crate :: prisma :: settings :: notification_file_changes :: NAME => Ok (Field :: notification_file_changes) , crate :: prisma :: settings :: notification_finished_translation :: NAME => Ok (Field :: notification_finished_translation) , crate :: prisma :: settings :: finished_scan :: NAME => Ok (Field :: finished_scan) , crate :: prisma :: settings :: translate_new_strings :: NAME => Ok (Field :: translate_new_strings) , crate :: prisma :: settings :: translate_updated_strings :: NAME => Ok (Field :: translate_updated_strings) , crate :: prisma :: settings :: default_language :: NAME => Ok (Field :: default_language) , crate :: prisma :: settings :: translation_command :: NAME => Ok (Field :: translation_command) , crate :: prisma :: settings :: home_default_size_nav :: NAME => Ok (Field :: home_default_size_nav) , crate :: prisma :: settings :: home_default_size_home :: NAME => Ok (Field :: home_default_size_home) , crate :: prisma :: settings :: home_nav_collapsed :: NAME => Ok (Field :: home_nav_collapsed) , crate :: prisma :: settings :: home_collapsed_nav_size :: NAME => Ok (Field :: home_collapsed_nav_size) , _ => Err (:: serde :: de :: Error :: unknown_field (value , FIELDS)) , } } } deserializer . deserialize_identifier (FieldVisitor) } } struct DataVisitor ; impl < 'de > :: serde :: de :: Visitor < 'de > for DataVisitor { type Value = Data ; fn expecting (& self , formatter : & mut std :: fmt :: Formatter) -> std :: fmt :: Result { formatter . write_str ("struct Data") } fn visit_map < V > (self , mut map : V) -> Result < Data , V :: Error > where V : :: serde :: de :: MapAccess < 'de > , { $ (let mut $ field = None ;) * let mut id = None ; let mut nav_open = None ; let mut theme = None ; let mut notifications_enabled = None ; let mut toast_rich_colors = None ; let mut notification_file_changes = None ; let mut notification_finished_translation = None ; let mut finished_scan = None ; let mut translate_new_strings = None ; let mut translate_updated_strings = None ; let mut default_language = None ; let mut translation_command = None ; let mut home_default_size_nav = None ; let mut home_default_size_home = None ; let mut home_nav_collapsed = None ; let mut home_collapsed_nav_size = None ; while let Some (key) = map . next_key () ? { match key { Field :: id => { if id . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: settings :: id :: NAME)) ; } id = Some (map . next_value () ?) ; } Field :: nav_open => { if nav_open . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: settings :: nav_open :: NAME)) ; } nav_open = Some (map . next_value () ?) ; } Field :: theme => { if theme . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: settings :: theme :: NAME)) ; } theme = Some (map . next_value () ?) ; } Field :: notifications_enabled => { if notifications_enabled . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: settings :: notifications_enabled :: NAME)) ; } notifications_enabled = Some (map . next_value () ?) ; } Field :: toast_rich_colors => { if toast_rich_colors . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: settings :: toast_rich_colors :: NAME)) ; } toast_rich_colors = Some (map . next_value () ?) ; } Field :: notification_file_changes => { if notification_file_changes . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: settings :: notification_file_changes :: NAME)) ; } notification_file_changes = Some (map . next_value () ?) ; } Field :: notification_finished_translation => { if notification_finished_translation . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: settings :: notification_finished_translation :: NAME)) ; } notification_finished_translation = Some (map . next_value () ?) ; } Field :: finished_scan => { if finished_scan . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: settings :: finished_scan :: NAME)) ; } finished_scan = Some (map . next_value () ?) ; } Field :: translate_new_strings => { if translate_new_strings . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: settings :: translate_new_strings :: NAME)) ; } translate_new_strings = Some (map . next_value () ?) ; } Field :: translate_updated_strings => { if translate_updated_strings . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: settings :: translate_updated_strings :: NAME)) ; } translate_updated_strings = Some (map . next_value () ?) ; } Field :: default_language => { if default_language . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: settings :: default_language :: NAME)) ; } default_language = Some (map . next_value () ?) ; } Field :: translation_command => { if translation_command . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: settings :: translation_command :: NAME)) ; } translation_command = Some (map . next_value () ?) ; } Field :: home_default_size_nav => { if home_default_size_nav . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: settings :: home_default_size_nav :: NAME)) ; } home_default_size_nav = Some (map . next_value () ?) ; } Field :: home_default_size_home => { if home_default_size_home . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: settings :: home_default_size_home :: NAME)) ; } home_default_size_home = Some (map . next_value () ?) ; } Field :: home_nav_collapsed => { if home_nav_collapsed . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: settings :: home_nav_collapsed :: NAME)) ; } home_nav_collapsed = Some (map . next_value () ?) ; } Field :: home_collapsed_nav_size => { if home_collapsed_nav_size . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: settings :: home_collapsed_nav_size :: NAME)) ; } home_collapsed_nav_size = Some (map . next_value () ?) ; } $ (Field :: $ field => { if $ field . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: settings :: $ field :: NAME)) ; } $ field = Some (map . next_value () ?) ; }) * } } $ (let $ field = $ field . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: settings :: $ field :: NAME)) ? ;) * let id = id . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: settings :: id :: NAME)) ? ; let nav_open = nav_open . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: settings :: nav_open :: NAME)) ? ; let theme = theme . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: settings :: theme :: NAME)) ? ; let notifications_enabled = notifications_enabled . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: settings :: notifications_enabled :: NAME)) ? ; let toast_rich_colors = toast_rich_colors . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: settings :: toast_rich_colors :: NAME)) ? ; let notification_file_changes = notification_file_changes . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: settings :: notification_file_changes :: NAME)) ? ; let notification_finished_translation = notification_finished_translation . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: settings :: notification_finished_translation :: NAME)) ? ; let finished_scan = finished_scan . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: settings :: finished_scan :: NAME)) ? ; let translate_new_strings = translate_new_strings . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: settings :: translate_new_strings :: NAME)) ? ; let translate_updated_strings = translate_updated_strings . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: settings :: translate_updated_strings :: NAME)) ? ; let default_language = default_language . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: settings :: default_language :: NAME)) ? ; let translation_command = translation_command . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: settings :: translation_command :: NAME)) ? ; let home_default_size_nav = home_default_size_nav . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: settings :: home_default_size_nav :: NAME)) ? ; let home_default_size_home = home_default_size_home . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: settings :: home_default_size_home :: NAME)) ? ; let home_nav_collapsed = home_nav_collapsed . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: settings :: home_nav_collapsed :: NAME)) ? ; let home_collapsed_nav_size = home_collapsed_nav_size . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: settings :: home_collapsed_nav_size :: NAME)) ? ; Ok (Data { id , nav_open , theme , notifications_enabled , toast_rich_colors , notification_file_changes , notification_finished_translation , finished_scan , translate_new_strings , translate_updated_strings , default_language , translation_command , home_default_size_nav , home_default_size_home , home_nav_collapsed , home_collapsed_nav_size , $ ($ field) , * }) } } const FIELDS : & 'static [& 'static str] = & ["id" , "nav_open" , "theme" , "notifications_enabled" , "toast_rich_colors" , "notification_file_changes" , "notification_finished_translation" , "finished_scan" , "translate_new_strings" , "translate_updated_strings" , "default_language" , "translation_command" , "home_default_size_nav" , "home_default_size_home" , "home_nav_collapsed" , "home_collapsed_nav_size"] ; deserializer . deserialize_struct ("Data" , FIELDS , DataVisitor) } } $ ($ (pub mod $ field { crate :: prisma :: settings :: $ selection_mode ! (@ field_module ; $ field : $ selection_mode { $ ($ selections) + }) ; }) ?) + } ; (@ field_type ; $ field : ident $ ($ tokens : tt) *) => { compile_error ! (stringify ! (Cannot include nonexistent relation $ field on model "Settings" , available relations are "")) } ; (@ field_module ; $ ($ tokens : tt) *) => { } ; (@ selection_field_to_selection_param ; $ ($ tokens : tt) *) => { compile_error ! (stringify ! ($ ($ tokens) *)) } ; (@ selections_to_params ; : $ macro_name : ident { $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { [$ (crate :: prisma :: settings :: $ macro_name ! (@ selection_field_to_selection_param ; $ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) ,) +] } ; (@ filters_to_args ;) => { vec ! [] } ; (@ filters_to_args ; $ ($ t : tt) *) => { $ ($ t) * } ; (@ field_serde_name ; id) => { "id" } ; (@ field_serde_name ; nav_open) => { "nav_open" } ; (@ field_serde_name ; theme) => { "theme" } ; (@ field_serde_name ; notifications_enabled) => { "notifications_enabled" } ; (@ field_serde_name ; toast_rich_colors) => { "toast_rich_colors" } ; (@ field_serde_name ; notification_file_changes) => { "notification_file_changes" } ; (@ field_serde_name ; notification_finished_translation) => { "notification_finished_translation" } ; (@ field_serde_name ; finished_scan) => { "finished_scan" } ; (@ field_serde_name ; translate_new_strings) => { "translate_new_strings" } ; (@ field_serde_name ; translate_updated_strings) => { "translate_updated_strings" } ; (@ field_serde_name ; default_language) => { "default_language" } ; (@ field_serde_name ; translation_command) => { "translation_command" } ; (@ field_serde_name ; home_default_size_nav) => { "home_default_size_nav" } ; (@ field_serde_name ; home_default_size_home) => { "home_default_size_home" } ; (@ field_serde_name ; home_nav_collapsed) => { "home_nav_collapsed" } ; (@ field_serde_name ; home_collapsed_nav_size) => { "home_collapsed_nav_size" } ; (@ specta_data_struct ; $ struct : item ;) => { # [allow (warnings)] # [derive (std :: fmt :: Debug , Clone)] # [derive (:: prisma_client_rust :: specta :: Type)] # [specta (rename_from_path = SPECTA_TYPE_NAME , crate = "prisma_client_rust::specta")] # [specta (inline)] $ struct } ; (@ specta_data_struct ; $ struct : item ; $ name : ident) => { # [allow (warnings)] # [derive (std :: fmt :: Debug , Clone)] # [derive (:: prisma_client_rust :: specta :: Type)] # [specta (rename_from_path = SPECTA_TYPE_NAME , crate = "prisma_client_rust::specta")] $ struct } ; }
    pub use _include_settings as include;
    pub enum IncludeParam {
        Id(id::Include),
        NavOpen(nav_open::Include),
        Theme(theme::Include),
        NotificationsEnabled(notifications_enabled::Include),
        ToastRichColors(toast_rich_colors::Include),
        NotificationFileChanges(notification_file_changes::Include),
        NotificationFinishedTranslation(notification_finished_translation::Include),
        FinishedScan(finished_scan::Include),
        TranslateNewStrings(translate_new_strings::Include),
        TranslateUpdatedStrings(translate_updated_strings::Include),
        DefaultLanguage(default_language::Include),
        TranslationCommand(translation_command::Include),
        HomeDefaultSizeNav(home_default_size_nav::Include),
        HomeDefaultSizeHome(home_default_size_home::Include),
        HomeNavCollapsed(home_nav_collapsed::Include),
        HomeCollapsedNavSize(home_collapsed_nav_size::Include),
    }
    impl IncludeParam {
        pub fn to_selection(self) -> ::prisma_client_rust::Selection {
            match self {
                Self::Id(data) => data.to_selection(),
                Self::NavOpen(data) => data.to_selection(),
                Self::Theme(data) => data.to_selection(),
                Self::NotificationsEnabled(data) => data.to_selection(),
                Self::ToastRichColors(data) => data.to_selection(),
                Self::NotificationFileChanges(data) => data.to_selection(),
                Self::NotificationFinishedTranslation(data) => data.to_selection(),
                Self::FinishedScan(data) => data.to_selection(),
                Self::TranslateNewStrings(data) => data.to_selection(),
                Self::TranslateUpdatedStrings(data) => data.to_selection(),
                Self::DefaultLanguage(data) => data.to_selection(),
                Self::TranslationCommand(data) => data.to_selection(),
                Self::HomeDefaultSizeNav(data) => data.to_selection(),
                Self::HomeDefaultSizeHome(data) => data.to_selection(),
                Self::HomeNavCollapsed(data) => data.to_selection(),
                Self::HomeCollapsedNavSize(data) => data.to_selection(),
            }
        }
    }
    #[macro_export]
    macro_rules ! _partial_unchecked_settings { ($ struct_name : ident { $ ($ scalar_field : ident) + }) => { :: prisma_client_rust :: macros :: partial_unchecked ! { crate :: prisma :: settings struct $ struct_name { # [serde (rename = "id")] pub id : i32 , # [serde (rename = "nav_open")] pub nav_open : bool , # [serde (rename = "theme")] pub theme : String , # [serde (rename = "notifications_enabled")] pub notifications_enabled : bool , # [serde (rename = "toast_rich_colors")] pub toast_rich_colors : bool , # [serde (rename = "notification_file_changes")] pub notification_file_changes : bool , # [serde (rename = "notification_finished_translation")] pub notification_finished_translation : bool , # [serde (rename = "finished_scan")] pub finished_scan : bool , # [serde (rename = "translate_new_strings")] pub translate_new_strings : bool , # [serde (rename = "translate_updated_strings")] pub translate_updated_strings : bool , # [serde (rename = "default_language")] pub default_language : String , # [serde (rename = "translation_command")] pub translation_command : String , # [serde (rename = "home_default_size_nav")] pub home_default_size_nav : i32 , # [serde (rename = "home_default_size_home")] pub home_default_size_home : i32 , # [serde (rename = "home_nav_collapsed")] pub home_nav_collapsed : bool , # [serde (rename = "home_collapsed_nav_size")] pub home_collapsed_nav_size : i32 } [$ ($ scalar_field) , +] } } ; }
    pub use _partial_unchecked_settings as partial_unchecked;
    #[derive(
        Debug,
        Clone,
        :: serde :: Serialize,
        :: serde :: Deserialize,
        :: prisma_client_rust :: specta :: Type,
    )]
    #[specta(rename = "Settings", crate = "prisma_client_rust::specta")]
    pub struct Data {
        #[serde(rename = "id")]
        pub id: i32,
        #[serde(rename = "nav_open")]
        pub nav_open: bool,
        #[serde(rename = "theme")]
        pub theme: String,
        #[serde(rename = "notifications_enabled")]
        pub notifications_enabled: bool,
        #[serde(rename = "toast_rich_colors")]
        pub toast_rich_colors: bool,
        #[serde(rename = "notification_file_changes")]
        pub notification_file_changes: bool,
        #[serde(rename = "notification_finished_translation")]
        pub notification_finished_translation: bool,
        #[serde(rename = "finished_scan")]
        pub finished_scan: bool,
        #[serde(rename = "translate_new_strings")]
        pub translate_new_strings: bool,
        #[serde(rename = "translate_updated_strings")]
        pub translate_updated_strings: bool,
        #[serde(rename = "default_language")]
        pub default_language: String,
        #[serde(rename = "translation_command")]
        pub translation_command: String,
        #[serde(rename = "home_default_size_nav")]
        pub home_default_size_nav: i32,
        #[serde(rename = "home_default_size_home")]
        pub home_default_size_home: i32,
        #[serde(rename = "home_nav_collapsed")]
        pub home_nav_collapsed: bool,
        #[serde(rename = "home_collapsed_nav_size")]
        pub home_collapsed_nav_size: i32,
    }
    impl Data {}
    #[derive(Clone)]
    pub enum WithParam {}
    impl Into<::prisma_client_rust::Selection> for WithParam {
        fn into(self) -> ::prisma_client_rust::Selection {
            match self {}
        }
    }
    #[derive(Clone)]
    pub enum SetParam {
        SetId(i32),
        IncrementId(i32),
        DecrementId(i32),
        MultiplyId(i32),
        DivideId(i32),
        SetNavOpen(bool),
        SetTheme(String),
        SetNotificationsEnabled(bool),
        SetToastRichColors(bool),
        SetNotificationFileChanges(bool),
        SetNotificationFinishedTranslation(bool),
        SetFinishedScan(bool),
        SetTranslateNewStrings(bool),
        SetTranslateUpdatedStrings(bool),
        SetDefaultLanguage(String),
        SetTranslationCommand(String),
        SetHomeDefaultSizeNav(i32),
        IncrementHomeDefaultSizeNav(i32),
        DecrementHomeDefaultSizeNav(i32),
        MultiplyHomeDefaultSizeNav(i32),
        DivideHomeDefaultSizeNav(i32),
        SetHomeDefaultSizeHome(i32),
        IncrementHomeDefaultSizeHome(i32),
        DecrementHomeDefaultSizeHome(i32),
        MultiplyHomeDefaultSizeHome(i32),
        DivideHomeDefaultSizeHome(i32),
        SetHomeNavCollapsed(bool),
        SetHomeCollapsedNavSize(i32),
        IncrementHomeCollapsedNavSize(i32),
        DecrementHomeCollapsedNavSize(i32),
        MultiplyHomeCollapsedNavSize(i32),
        DivideHomeCollapsedNavSize(i32),
    }
    impl From<SetParam> for (String, ::prisma_client_rust::PrismaValue) {
        fn from(param: SetParam) -> Self {
            match param {
                SetParam::SetId(value) => (
                    id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Int(value as i64),
                ),
                SetParam::IncrementId(value) => (
                    id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "increment".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::DecrementId(value) => (
                    id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "decrement".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::MultiplyId(value) => (
                    id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "multiply".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::DivideId(value) => (
                    id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "divide".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::SetNavOpen(value) => (
                    nav_open::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Boolean(value),
                ),
                SetParam::SetTheme(value) => (
                    theme::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(value),
                ),
                SetParam::SetNotificationsEnabled(value) => (
                    notifications_enabled::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Boolean(value),
                ),
                SetParam::SetToastRichColors(value) => (
                    toast_rich_colors::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Boolean(value),
                ),
                SetParam::SetNotificationFileChanges(value) => (
                    notification_file_changes::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Boolean(value),
                ),
                SetParam::SetNotificationFinishedTranslation(value) => (
                    notification_finished_translation::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Boolean(value),
                ),
                SetParam::SetFinishedScan(value) => (
                    finished_scan::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Boolean(value),
                ),
                SetParam::SetTranslateNewStrings(value) => (
                    translate_new_strings::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Boolean(value),
                ),
                SetParam::SetTranslateUpdatedStrings(value) => (
                    translate_updated_strings::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Boolean(value),
                ),
                SetParam::SetDefaultLanguage(value) => (
                    default_language::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(value),
                ),
                SetParam::SetTranslationCommand(value) => (
                    translation_command::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(value),
                ),
                SetParam::SetHomeDefaultSizeNav(value) => (
                    home_default_size_nav::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Int(value as i64),
                ),
                SetParam::IncrementHomeDefaultSizeNav(value) => (
                    home_default_size_nav::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "increment".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::DecrementHomeDefaultSizeNav(value) => (
                    home_default_size_nav::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "decrement".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::MultiplyHomeDefaultSizeNav(value) => (
                    home_default_size_nav::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "multiply".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::DivideHomeDefaultSizeNav(value) => (
                    home_default_size_nav::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "divide".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::SetHomeDefaultSizeHome(value) => (
                    home_default_size_home::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Int(value as i64),
                ),
                SetParam::IncrementHomeDefaultSizeHome(value) => (
                    home_default_size_home::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "increment".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::DecrementHomeDefaultSizeHome(value) => (
                    home_default_size_home::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "decrement".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::MultiplyHomeDefaultSizeHome(value) => (
                    home_default_size_home::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "multiply".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::DivideHomeDefaultSizeHome(value) => (
                    home_default_size_home::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "divide".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::SetHomeNavCollapsed(value) => (
                    home_nav_collapsed::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Boolean(value),
                ),
                SetParam::SetHomeCollapsedNavSize(value) => (
                    home_collapsed_nav_size::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Int(value as i64),
                ),
                SetParam::IncrementHomeCollapsedNavSize(value) => (
                    home_collapsed_nav_size::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "increment".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::DecrementHomeCollapsedNavSize(value) => (
                    home_collapsed_nav_size::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "decrement".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::MultiplyHomeCollapsedNavSize(value) => (
                    home_collapsed_nav_size::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "multiply".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::DivideHomeCollapsedNavSize(value) => (
                    home_collapsed_nav_size::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "divide".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
            }
        }
    }
    #[derive(Clone)]
    pub enum UncheckedSetParam {
        Id(i32),
        NavOpen(bool),
        Theme(String),
        NotificationsEnabled(bool),
        ToastRichColors(bool),
        NotificationFileChanges(bool),
        NotificationFinishedTranslation(bool),
        FinishedScan(bool),
        TranslateNewStrings(bool),
        TranslateUpdatedStrings(bool),
        DefaultLanguage(String),
        TranslationCommand(String),
        HomeDefaultSizeNav(i32),
        HomeDefaultSizeHome(i32),
        HomeNavCollapsed(bool),
        HomeCollapsedNavSize(i32),
    }
    impl From<UncheckedSetParam> for SetParam {
        fn from(param: UncheckedSetParam) -> Self {
            match param {
                UncheckedSetParam::Id(value) => Self::SetId(value),
                UncheckedSetParam::NavOpen(value) => Self::SetNavOpen(value),
                UncheckedSetParam::Theme(value) => Self::SetTheme(value),
                UncheckedSetParam::NotificationsEnabled(value) => {
                    Self::SetNotificationsEnabled(value)
                }
                UncheckedSetParam::ToastRichColors(value) => Self::SetToastRichColors(value),
                UncheckedSetParam::NotificationFileChanges(value) => {
                    Self::SetNotificationFileChanges(value)
                }
                UncheckedSetParam::NotificationFinishedTranslation(value) => {
                    Self::SetNotificationFinishedTranslation(value)
                }
                UncheckedSetParam::FinishedScan(value) => Self::SetFinishedScan(value),
                UncheckedSetParam::TranslateNewStrings(value) => {
                    Self::SetTranslateNewStrings(value)
                }
                UncheckedSetParam::TranslateUpdatedStrings(value) => {
                    Self::SetTranslateUpdatedStrings(value)
                }
                UncheckedSetParam::DefaultLanguage(value) => Self::SetDefaultLanguage(value),
                UncheckedSetParam::TranslationCommand(value) => Self::SetTranslationCommand(value),
                UncheckedSetParam::HomeDefaultSizeNav(value) => Self::SetHomeDefaultSizeNav(value),
                UncheckedSetParam::HomeDefaultSizeHome(value) => {
                    Self::SetHomeDefaultSizeHome(value)
                }
                UncheckedSetParam::HomeNavCollapsed(value) => Self::SetHomeNavCollapsed(value),
                UncheckedSetParam::HomeCollapsedNavSize(value) => {
                    Self::SetHomeCollapsedNavSize(value)
                }
            }
        }
    }
    #[derive(Clone)]
    pub enum OrderByParam {
        Id(::prisma_client_rust::Direction),
        NavOpen(::prisma_client_rust::Direction),
        Theme(::prisma_client_rust::Direction),
        NotificationsEnabled(::prisma_client_rust::Direction),
        ToastRichColors(::prisma_client_rust::Direction),
        NotificationFileChanges(::prisma_client_rust::Direction),
        NotificationFinishedTranslation(::prisma_client_rust::Direction),
        FinishedScan(::prisma_client_rust::Direction),
        TranslateNewStrings(::prisma_client_rust::Direction),
        TranslateUpdatedStrings(::prisma_client_rust::Direction),
        DefaultLanguage(::prisma_client_rust::Direction),
        TranslationCommand(::prisma_client_rust::Direction),
        HomeDefaultSizeNav(::prisma_client_rust::Direction),
        HomeDefaultSizeHome(::prisma_client_rust::Direction),
        HomeNavCollapsed(::prisma_client_rust::Direction),
        HomeCollapsedNavSize(::prisma_client_rust::Direction),
    }
    impl Into<(String, ::prisma_client_rust::PrismaValue)> for OrderByParam {
        fn into(self) -> (String, ::prisma_client_rust::PrismaValue) {
            match self {
                Self::Id(direction) => (
                    id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
                Self::NavOpen(direction) => (
                    nav_open::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
                Self::Theme(direction) => (
                    theme::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
                Self::NotificationsEnabled(direction) => (
                    notifications_enabled::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
                Self::ToastRichColors(direction) => (
                    toast_rich_colors::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
                Self::NotificationFileChanges(direction) => (
                    notification_file_changes::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
                Self::NotificationFinishedTranslation(direction) => (
                    notification_finished_translation::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
                Self::FinishedScan(direction) => (
                    finished_scan::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
                Self::TranslateNewStrings(direction) => (
                    translate_new_strings::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
                Self::TranslateUpdatedStrings(direction) => (
                    translate_updated_strings::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
                Self::DefaultLanguage(direction) => (
                    default_language::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
                Self::TranslationCommand(direction) => (
                    translation_command::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
                Self::HomeDefaultSizeNav(direction) => (
                    home_default_size_nav::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
                Self::HomeDefaultSizeHome(direction) => (
                    home_default_size_home::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
                Self::HomeNavCollapsed(direction) => (
                    home_nav_collapsed::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
                Self::HomeCollapsedNavSize(direction) => (
                    home_collapsed_nav_size::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
            }
        }
    }
    #[derive(Clone)]
    pub enum WhereParam {
        Not(Vec<WhereParam>),
        Or(Vec<WhereParam>),
        And(Vec<WhereParam>),
        Id(_prisma::read_filters::IntFilter),
        NavOpen(_prisma::read_filters::BoolFilter),
        Theme(_prisma::read_filters::StringFilter),
        NotificationsEnabled(_prisma::read_filters::BoolFilter),
        ToastRichColors(_prisma::read_filters::BoolFilter),
        NotificationFileChanges(_prisma::read_filters::BoolFilter),
        NotificationFinishedTranslation(_prisma::read_filters::BoolFilter),
        FinishedScan(_prisma::read_filters::BoolFilter),
        TranslateNewStrings(_prisma::read_filters::BoolFilter),
        TranslateUpdatedStrings(_prisma::read_filters::BoolFilter),
        DefaultLanguage(_prisma::read_filters::StringFilter),
        TranslationCommand(_prisma::read_filters::StringFilter),
        HomeDefaultSizeNav(_prisma::read_filters::IntFilter),
        HomeDefaultSizeHome(_prisma::read_filters::IntFilter),
        HomeNavCollapsed(_prisma::read_filters::BoolFilter),
        HomeCollapsedNavSize(_prisma::read_filters::IntFilter),
    }
    impl ::prisma_client_rust::WhereInput for WhereParam {
        fn serialize(self) -> ::prisma_client_rust::SerializedWhereInput {
            let (name, value) = match self {
                Self::Not(value) => (
                    "NOT",
                    ::prisma_client_rust::SerializedWhereValue::Object(
                        ::prisma_client_rust::merge_fields(
                            value
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(Into::into)
                                .collect(),
                        ),
                    ),
                ),
                Self::Or(value) => (
                    "OR",
                    ::prisma_client_rust::SerializedWhereValue::List(
                        value
                            .into_iter()
                            .map(::prisma_client_rust::WhereInput::serialize)
                            .map(Into::into)
                            .map(|v| vec![v])
                            .map(::prisma_client_rust::PrismaValue::Object)
                            .collect(),
                    ),
                ),
                Self::And(value) => (
                    "AND",
                    ::prisma_client_rust::SerializedWhereValue::Object(
                        ::prisma_client_rust::merge_fields(
                            value
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(Into::into)
                                .collect(),
                        ),
                    ),
                ),
                Self::Id(value) => (id::NAME, value.into()),
                Self::NavOpen(value) => (nav_open::NAME, value.into()),
                Self::Theme(value) => (theme::NAME, value.into()),
                Self::NotificationsEnabled(value) => (notifications_enabled::NAME, value.into()),
                Self::ToastRichColors(value) => (toast_rich_colors::NAME, value.into()),
                Self::NotificationFileChanges(value) => {
                    (notification_file_changes::NAME, value.into())
                }
                Self::NotificationFinishedTranslation(value) => {
                    (notification_finished_translation::NAME, value.into())
                }
                Self::FinishedScan(value) => (finished_scan::NAME, value.into()),
                Self::TranslateNewStrings(value) => (translate_new_strings::NAME, value.into()),
                Self::TranslateUpdatedStrings(value) => {
                    (translate_updated_strings::NAME, value.into())
                }
                Self::DefaultLanguage(value) => (default_language::NAME, value.into()),
                Self::TranslationCommand(value) => (translation_command::NAME, value.into()),
                Self::HomeDefaultSizeNav(value) => (home_default_size_nav::NAME, value.into()),
                Self::HomeDefaultSizeHome(value) => (home_default_size_home::NAME, value.into()),
                Self::HomeNavCollapsed(value) => (home_nav_collapsed::NAME, value.into()),
                Self::HomeCollapsedNavSize(value) => (home_collapsed_nav_size::NAME, value.into()),
            };
            ::prisma_client_rust::SerializedWhereInput::new(name, value.into())
        }
    }
    #[derive(Clone)]
    pub enum UniqueWhereParam {
        IdEquals(i32),
    }
    impl From<UniqueWhereParam> for WhereParam {
        fn from(value: UniqueWhereParam) -> Self {
            match value {
                UniqueWhereParam::IdEquals(value) => {
                    Self::Id(_prisma::read_filters::IntFilter::Equals(value))
                }
            }
        }
    }
    impl From<::prisma_client_rust::Operator<Self>> for WhereParam {
        fn from(op: ::prisma_client_rust::Operator<Self>) -> Self {
            match op {
                ::prisma_client_rust::Operator::Not(value) => Self::Not(value),
                ::prisma_client_rust::Operator::And(value) => Self::And(value),
                ::prisma_client_rust::Operator::Or(value) => Self::Or(value),
            }
        }
    }
    #[derive(Clone)]
    pub struct Types;
    impl ::prisma_client_rust::ModelTypes for Types {
        type Data = Data;
        type Where = WhereParam;
        type UncheckedSet = UncheckedSetParam;
        type Set = SetParam;
        type With = WithParam;
        type OrderBy = OrderByParam;
        type Cursor = UniqueWhereParam;
        const MODEL: &'static str = NAME;
        fn scalar_selections() -> Vec<::prisma_client_rust::Selection> {
            vec![
                ::prisma_client_rust::sel(id::NAME),
                ::prisma_client_rust::sel(nav_open::NAME),
                ::prisma_client_rust::sel(theme::NAME),
                ::prisma_client_rust::sel(notifications_enabled::NAME),
                ::prisma_client_rust::sel(toast_rich_colors::NAME),
                ::prisma_client_rust::sel(notification_file_changes::NAME),
                ::prisma_client_rust::sel(notification_finished_translation::NAME),
                ::prisma_client_rust::sel(finished_scan::NAME),
                ::prisma_client_rust::sel(translate_new_strings::NAME),
                ::prisma_client_rust::sel(translate_updated_strings::NAME),
                ::prisma_client_rust::sel(default_language::NAME),
                ::prisma_client_rust::sel(translation_command::NAME),
                ::prisma_client_rust::sel(home_default_size_nav::NAME),
                ::prisma_client_rust::sel(home_default_size_home::NAME),
                ::prisma_client_rust::sel(home_nav_collapsed::NAME),
                ::prisma_client_rust::sel(home_collapsed_nav_size::NAME),
            ]
        }
    }
    pub type UniqueArgs = ::prisma_client_rust::UniqueArgs<Types>;
    pub type ManyArgs = ::prisma_client_rust::ManyArgs<Types>;
    pub type Count<'a> = ::prisma_client_rust::Count<'a, Types>;
    pub type Create<'a> = ::prisma_client_rust::Create<'a, Types>;
    pub type CreateMany<'a> = ::prisma_client_rust::CreateMany<'a, Types>;
    pub type FindUnique<'a> = ::prisma_client_rust::FindUnique<'a, Types>;
    pub type FindMany<'a> = ::prisma_client_rust::FindMany<'a, Types>;
    pub type FindFirst<'a> = ::prisma_client_rust::FindFirst<'a, Types>;
    pub type Update<'a> = ::prisma_client_rust::Update<'a, Types>;
    pub type UpdateMany<'a> = ::prisma_client_rust::UpdateMany<'a, Types>;
    pub type Upsert<'a> = ::prisma_client_rust::Upsert<'a, Types>;
    pub type Delete<'a> = ::prisma_client_rust::Delete<'a, Types>;
    pub type DeleteMany<'a> = ::prisma_client_rust::DeleteMany<'a, Types>;
    #[derive(Clone)]
    pub struct Actions<'a> {
        pub client: &'a ::prisma_client_rust::PrismaClientInternals,
    }
    impl<'a> Actions<'a> {
        pub fn find_unique(self, _where: UniqueWhereParam) -> FindUnique<'a> {
            FindUnique::new(self.client, _where.into())
        }
        pub fn find_first(self, _where: Vec<WhereParam>) -> FindFirst<'a> {
            FindFirst::new(self.client, _where)
        }
        pub fn find_many(self, _where: Vec<WhereParam>) -> FindMany<'a> {
            FindMany::new(self.client, _where)
        }
        pub fn create(self, mut _params: Vec<SetParam>) -> Create<'a> {
            _params.extend([]);
            Create::new(self.client, _params)
        }
        pub fn create_unchecked(self, mut _params: Vec<UncheckedSetParam>) -> Create<'a> {
            _params.extend([]);
            Create::new(self.client, _params.into_iter().map(Into::into).collect())
        }
        pub fn update(self, _where: UniqueWhereParam, _params: Vec<SetParam>) -> Update<'a> {
            Update::new(self.client, _where.into(), _params, vec![])
        }
        pub fn update_unchecked(
            self,
            _where: UniqueWhereParam,
            _params: Vec<UncheckedSetParam>,
        ) -> Update<'a> {
            Update::new(
                self.client,
                _where.into(),
                _params.into_iter().map(Into::into).collect(),
                vec![],
            )
        }
        pub fn update_many(
            self,
            _where: Vec<WhereParam>,
            _params: Vec<SetParam>,
        ) -> UpdateMany<'a> {
            UpdateMany::new(self.client, _where, _params)
        }
        pub fn upsert(
            self,
            _where: UniqueWhereParam,
            (mut _params): (Vec<SetParam>),
            _update: Vec<SetParam>,
        ) -> Upsert<'a> {
            _params.extend([]);
            Upsert::new(self.client, _where.into(), _params, _update)
        }
        pub fn delete(self, _where: UniqueWhereParam) -> Delete<'a> {
            Delete::new(self.client, _where.into(), vec![])
        }
        pub fn delete_many(self, _where: Vec<WhereParam>) -> DeleteMany<'a> {
            DeleteMany::new(self.client, _where)
        }
        pub fn count(self, _where: Vec<WhereParam>) -> Count<'a> {
            Count::new(self.client, _where)
        }
        pub fn find_raw<T: ::prisma_client_rust::Data>(
            self,
        ) -> ::prisma_client_rust::FindRaw<'a, Types, T> {
            ::prisma_client_rust::FindRaw::new(self.client)
        }
        pub fn aggregate_raw<T: ::prisma_client_rust::Data>(
            self,
        ) -> ::prisma_client_rust::AggregateRaw<'a, Types, T> {
            ::prisma_client_rust::AggregateRaw::new(self.client)
        }
    }
}
pub mod location {
    use super::_prisma::*;
    use super::*;
    pub const NAME: &str = "Location";
    pub mod id {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "id";
        pub struct Set(pub i32);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetId(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::Id(v)
            }
        }
        pub fn set<T: From<Set>>(value: i32) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::Id(direction)
        }
        pub fn equals<T: From<UniqueWhereParam>>(value: i32) -> T {
            UniqueWhereParam::IdEquals(value).into()
        }
        ::prisma_client_rust::scalar_where_param_fns!(_prisma::read_filters::IntFilter, Id, {
            fn in_vec(_: Vec<i32>) -> InVec;
            fn not_in_vec(_: Vec<i32>) -> NotInVec;
            fn lt(_: i32) -> Lt;
            fn lte(_: i32) -> Lte;
            fn gt(_: i32) -> Gt;
            fn gte(_: i32) -> Gte;
            fn not(_: i32) -> Not;
        });
        pub fn increment(value: i32) -> SetParam {
            SetParam::IncrementId(value)
        }
        pub fn decrement(value: i32) -> SetParam {
            SetParam::DecrementId(value)
        }
        pub fn multiply(value: i32) -> SetParam {
            SetParam::MultiplyId(value)
        }
        pub fn divide(value: i32) -> SetParam {
            SetParam::DivideId(value)
        }
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::Id(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::Id(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod tag {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "tag";
        pub struct Set(pub String);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetTag(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::Tag(v)
            }
        }
        pub fn set<T: From<Set>>(value: String) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::Tag(direction)
        }
        pub fn equals(value: String) -> WhereParam {
            WhereParam::Tag(_prisma::read_filters::StringFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(_prisma::read_filters::StringFilter, Tag, {
            fn in_vec(_: Vec<String>) -> InVec;
            fn not_in_vec(_: Vec<String>) -> NotInVec;
            fn lt(_: String) -> Lt;
            fn lte(_: String) -> Lte;
            fn gt(_: String) -> Gt;
            fn gte(_: String) -> Gte;
            fn contains(_: String) -> Contains;
            fn starts_with(_: String) -> StartsWith;
            fn ends_with(_: String) -> EndsWith;
            fn not(_: String) -> Not;
        });
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::Tag(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::Tag(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod name {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "name";
        pub struct Set(pub String);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetName(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::Name(v)
            }
        }
        pub fn set<T: From<Set>>(value: String) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::Name(direction)
        }
        pub fn equals<T: From<UniqueWhereParam>>(value: String) -> T {
            UniqueWhereParam::NameEquals(value).into()
        }
        ::prisma_client_rust::scalar_where_param_fns!(_prisma::read_filters::StringFilter, Name, {
            fn in_vec(_: Vec<String>) -> InVec;
            fn not_in_vec(_: Vec<String>) -> NotInVec;
            fn lt(_: String) -> Lt;
            fn lte(_: String) -> Lte;
            fn gt(_: String) -> Gt;
            fn gte(_: String) -> Gte;
            fn contains(_: String) -> Contains;
            fn starts_with(_: String) -> StartsWith;
            fn ends_with(_: String) -> EndsWith;
            fn not(_: String) -> Not;
        });
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::Name(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::Name(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod path {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "path";
        pub struct Set(pub String);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetPath(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::Path(v)
            }
        }
        pub fn set<T: From<Set>>(value: String) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::Path(direction)
        }
        pub fn equals<T: From<UniqueWhereParam>>(value: String) -> T {
            UniqueWhereParam::PathEquals(value).into()
        }
        ::prisma_client_rust::scalar_where_param_fns!(_prisma::read_filters::StringFilter, Path, {
            fn in_vec(_: Vec<String>) -> InVec;
            fn not_in_vec(_: Vec<String>) -> NotInVec;
            fn lt(_: String) -> Lt;
            fn lte(_: String) -> Lte;
            fn gt(_: String) -> Gt;
            fn gte(_: String) -> Gte;
            fn contains(_: String) -> Contains;
            fn starts_with(_: String) -> StartsWith;
            fn ends_with(_: String) -> EndsWith;
            fn not(_: String) -> Not;
        });
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::Path(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::Path(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod is_favourite {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "is_favourite";
        pub struct Set(pub bool);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetIsFavourite(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::IsFavourite(v)
            }
        }
        pub fn set<T: From<Set>>(value: bool) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::IsFavourite(direction)
        }
        pub fn equals(value: bool) -> WhereParam {
            WhereParam::IsFavourite(_prisma::read_filters::BoolFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(
            _prisma::read_filters::BoolFilter,
            IsFavourite,
            {
                fn not(_: bool) -> Not;
            }
        );
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::IsFavourite(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::IsFavourite(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod num_of_keys {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "num_of_keys";
        pub struct Set(pub i32);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetNumOfKeys(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::NumOfKeys(v)
            }
        }
        pub fn set<T: From<Set>>(value: i32) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::NumOfKeys(direction)
        }
        pub fn equals(value: i32) -> WhereParam {
            WhereParam::NumOfKeys(_prisma::read_filters::IntFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(
            _prisma::read_filters::IntFilter,
            NumOfKeys,
            {
                fn in_vec(_: Vec<i32>) -> InVec;
                fn not_in_vec(_: Vec<i32>) -> NotInVec;
                fn lt(_: i32) -> Lt;
                fn lte(_: i32) -> Lte;
                fn gt(_: i32) -> Gt;
                fn gte(_: i32) -> Gte;
                fn not(_: i32) -> Not;
            }
        );
        pub fn increment(value: i32) -> SetParam {
            SetParam::IncrementNumOfKeys(value)
        }
        pub fn decrement(value: i32) -> SetParam {
            SetParam::DecrementNumOfKeys(value)
        }
        pub fn multiply(value: i32) -> SetParam {
            SetParam::MultiplyNumOfKeys(value)
        }
        pub fn divide(value: i32) -> SetParam {
            SetParam::DivideNumOfKeys(value)
        }
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::NumOfKeys(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::NumOfKeys(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod num_of_untranslated_keys {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "num_of_untranslated_keys";
        pub struct Set(pub i32);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetNumOfUntranslatedKeys(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::NumOfUntranslatedKeys(v)
            }
        }
        pub fn set<T: From<Set>>(value: i32) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::NumOfUntranslatedKeys(direction)
        }
        pub fn equals(value: i32) -> WhereParam {
            WhereParam::NumOfUntranslatedKeys(_prisma::read_filters::IntFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(
            _prisma::read_filters::IntFilter,
            NumOfUntranslatedKeys,
            {
                fn in_vec(_: Vec<i32>) -> InVec;
                fn not_in_vec(_: Vec<i32>) -> NotInVec;
                fn lt(_: i32) -> Lt;
                fn lte(_: i32) -> Lte;
                fn gt(_: i32) -> Gt;
                fn gte(_: i32) -> Gte;
                fn not(_: i32) -> Not;
            }
        );
        pub fn increment(value: i32) -> SetParam {
            SetParam::IncrementNumOfUntranslatedKeys(value)
        }
        pub fn decrement(value: i32) -> SetParam {
            SetParam::DecrementNumOfUntranslatedKeys(value)
        }
        pub fn multiply(value: i32) -> SetParam {
            SetParam::MultiplyNumOfUntranslatedKeys(value)
        }
        pub fn divide(value: i32) -> SetParam {
            SetParam::DivideNumOfUntranslatedKeys(value)
        }
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::NumOfUntranslatedKeys(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::NumOfUntranslatedKeys(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod added_at {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "added_at";
        pub struct Set(pub String);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetAddedAt(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::AddedAt(v)
            }
        }
        pub fn set<T: From<Set>>(value: String) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::AddedAt(direction)
        }
        pub fn equals(value: String) -> WhereParam {
            WhereParam::AddedAt(_prisma::read_filters::StringFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(
            _prisma::read_filters::StringFilter,
            AddedAt,
            {
                fn in_vec(_: Vec<String>) -> InVec;
                fn not_in_vec(_: Vec<String>) -> NotInVec;
                fn lt(_: String) -> Lt;
                fn lte(_: String) -> Lte;
                fn gt(_: String) -> Gt;
                fn gte(_: String) -> Gte;
                fn contains(_: String) -> Contains;
                fn starts_with(_: String) -> StartsWith;
                fn ends_with(_: String) -> EndsWith;
                fn not(_: String) -> Not;
            }
        );
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::AddedAt(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::AddedAt(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub fn create(
        tag: String,
        name: String,
        path: String,
        num_of_keys: i32,
        num_of_untranslated_keys: i32,
        added_at: String,
        _params: Vec<SetParam>,
    ) -> (String, String, String, i32, i32, String, Vec<SetParam>) {
        (
            tag,
            name,
            path,
            num_of_keys,
            num_of_untranslated_keys,
            added_at,
            _params,
        )
    }
    pub fn create_unchecked(
        tag: String,
        name: String,
        path: String,
        num_of_keys: i32,
        num_of_untranslated_keys: i32,
        added_at: String,
        _params: Vec<SetParam>,
    ) -> (String, String, String, i32, i32, String, Vec<SetParam>) {
        (
            tag,
            name,
            path,
            num_of_keys,
            num_of_untranslated_keys,
            added_at,
            _params,
        )
    }
    #[macro_export]
    macro_rules ! _select_location { ($ (($ ($ func_arg : ident : $ func_arg_ty : ty) , +) =>) ? $ module_name : ident { $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { # [allow (warnings)] pub mod $ module_name { crate :: prisma :: location :: select ! (@ definitions ; $ module_name ; $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) +) ; use super :: * ; pub struct Selection (Vec < :: prisma_client_rust :: Selection >) ; impl :: prisma_client_rust :: SelectType for Selection { type Data = Data ; type ModelData = crate :: prisma :: location :: Data ; fn to_selections (self) -> Vec < :: prisma_client_rust :: Selection > { self . 0 } } pub fn select ($ ($ ($ func_arg : $ func_arg_ty) , +) ?) -> Selection { Selection ([crate :: prisma :: location :: select ! (@ selections_to_params ; : select { $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) + }) . into_iter () . map (| p | p . to_selection ()) . collect :: < Vec < _ >> () ,] . into_iter () . flatten () . collect :: < Vec < _ >> ()) } } } ; ({ $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { { crate :: prisma :: location :: select ! (@ definitions ; ; $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) +) ; pub struct Selection (Vec < :: prisma_client_rust :: Selection >) ; impl :: prisma_client_rust :: SelectType for Selection { type Data = Data ; type ModelData = crate :: prisma :: location :: Data ; fn to_selections (self) -> Vec < :: prisma_client_rust :: Selection > { self . 0 } } Selection ([crate :: prisma :: location :: select ! (@ selections_to_params ; : select { $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) + }) . into_iter () . map (| p | p . to_selection ()) . collect :: < Vec < _ >> () ,] . into_iter () . flatten () . collect :: < Vec < _ >> ()) } } ; (@ definitions ; $ ($ module_name : ident) ? ; $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) +) => { # [allow (warnings)] enum Fields { id , tag , name , path , is_favourite , num_of_keys , num_of_untranslated_keys , added_at } # [allow (warnings)] impl Fields { fn selections () { $ (let _ = Fields :: $ field ;) + } } const SPECTA_TYPE_NAME : & 'static str = prisma_client_rust :: macros :: to_pascal_case ! ($ ($ module_name) ?) ; crate :: prisma :: location :: select ! (@ specta_data_struct ; pub struct Data { $ (# [specta (rename_from_path = crate :: prisma :: location :: $ field :: NAME)] pub $ field : crate :: prisma :: location :: select ! (@ field_type ; $ field $ (: $ selection_mode { $ ($ selections) + }) ?) ,) + } ; $ ($ module_name) ?) ; impl :: serde :: Serialize for Data { fn serialize < S > (& self , serializer : S) -> Result < S :: Ok , S :: Error > where S : :: serde :: Serializer , { use :: serde :: ser :: SerializeStruct ; let mut state = serializer . serialize_struct ("Data" , [$ (stringify ! ($ field) ,) +] . len ()) ? ; $ (state . serialize_field (crate :: prisma :: location :: $ field :: NAME , & self . $ field) ? ;) * state . end () } } impl < 'de > :: serde :: Deserialize < 'de > for Data { fn deserialize < D > (deserializer : D) -> Result < Self , D :: Error > where D : :: serde :: Deserializer < 'de > , { # [allow (warnings)] enum Field { $ ($ field) , + , } impl < 'de > :: serde :: Deserialize < 'de > for Field { fn deserialize < D > (deserializer : D) -> Result < Field , D :: Error > where D : :: serde :: Deserializer < 'de > , { struct FieldVisitor ; impl < 'de > :: serde :: de :: Visitor < 'de > for FieldVisitor { type Value = Field ; fn expecting (& self , formatter : & mut :: std :: fmt :: Formatter) -> :: std :: fmt :: Result { formatter . write_str (& [$ (crate :: prisma :: location :: $ field :: NAME) , + ,] . into_iter () . collect :: < Vec < _ >> () . join (", ")) } fn visit_str < E > (self , value : & str) -> Result < Field , E > where E : :: serde :: de :: Error , { match value { $ (crate :: prisma :: location :: $ field :: NAME => Ok (Field :: $ field)) , * , _ => Err (:: serde :: de :: Error :: unknown_field (value , FIELDS)) , } } } deserializer . deserialize_identifier (FieldVisitor) } } struct DataVisitor ; impl < 'de > :: serde :: de :: Visitor < 'de > for DataVisitor { type Value = Data ; fn expecting (& self , formatter : & mut std :: fmt :: Formatter) -> std :: fmt :: Result { formatter . write_str ("struct Data") } fn visit_map < V > (self , mut map : V) -> Result < Data , V :: Error > where V : :: serde :: de :: MapAccess < 'de > , { $ (let mut $ field = None ;) * while let Some (key) = map . next_key () ? { match key { $ (Field :: $ field => { if $ field . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: location :: $ field :: NAME)) ; } $ field = Some (map . next_value () ?) ; }) * } } $ (let $ field = $ field . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: location :: $ field :: NAME)) ? ;) * Ok (Data { $ ($ field) , * }) } } const FIELDS : & 'static [& 'static str] = & ["id" , "tag" , "name" , "path" , "is_favourite" , "num_of_keys" , "num_of_untranslated_keys" , "added_at"] ; deserializer . deserialize_struct ("Data" , FIELDS , DataVisitor) } } $ ($ (pub mod $ field { crate :: prisma :: location :: $ selection_mode ! (@ field_module ; $ field : $ selection_mode { $ ($ selections) + }) ; }) ?) + } ; (@ field_type ; id) => { i32 } ; (@ field_type ; tag) => { String } ; (@ field_type ; name) => { String } ; (@ field_type ; path) => { String } ; (@ field_type ; is_favourite) => { bool } ; (@ field_type ; num_of_keys) => { i32 } ; (@ field_type ; num_of_untranslated_keys) => { i32 } ; (@ field_type ; added_at) => { String } ; (@ field_type ; $ field : ident $ ($ tokens : tt) *) => { compile_error ! (stringify ! (Cannot include nonexistent relation $ field on model "Location" , available relations are "id, tag, name, path, is_favourite, num_of_keys, num_of_untranslated_keys, added_at")) } ; (@ field_module ; $ ($ tokens : tt) *) => { } ; (@ selection_field_to_selection_param ; id) => { Into :: < crate :: prisma :: location :: SelectParam > :: into (crate :: prisma :: location :: id :: Select) } ; (@ selection_field_to_selection_param ; tag) => { Into :: < crate :: prisma :: location :: SelectParam > :: into (crate :: prisma :: location :: tag :: Select) } ; (@ selection_field_to_selection_param ; name) => { Into :: < crate :: prisma :: location :: SelectParam > :: into (crate :: prisma :: location :: name :: Select) } ; (@ selection_field_to_selection_param ; path) => { Into :: < crate :: prisma :: location :: SelectParam > :: into (crate :: prisma :: location :: path :: Select) } ; (@ selection_field_to_selection_param ; is_favourite) => { Into :: < crate :: prisma :: location :: SelectParam > :: into (crate :: prisma :: location :: is_favourite :: Select) } ; (@ selection_field_to_selection_param ; num_of_keys) => { Into :: < crate :: prisma :: location :: SelectParam > :: into (crate :: prisma :: location :: num_of_keys :: Select) } ; (@ selection_field_to_selection_param ; num_of_untranslated_keys) => { Into :: < crate :: prisma :: location :: SelectParam > :: into (crate :: prisma :: location :: num_of_untranslated_keys :: Select) } ; (@ selection_field_to_selection_param ; added_at) => { Into :: < crate :: prisma :: location :: SelectParam > :: into (crate :: prisma :: location :: added_at :: Select) } ; (@ selection_field_to_selection_param ; $ ($ tokens : tt) *) => { compile_error ! (stringify ! ($ ($ tokens) *)) } ; (@ selections_to_params ; : $ macro_name : ident { $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { [$ (crate :: prisma :: location :: $ macro_name ! (@ selection_field_to_selection_param ; $ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) ,) +] } ; (@ filters_to_args ;) => { vec ! [] } ; (@ filters_to_args ; $ ($ t : tt) *) => { $ ($ t) * } ; (@ field_serde_name ; id) => { "id" } ; (@ field_serde_name ; tag) => { "tag" } ; (@ field_serde_name ; name) => { "name" } ; (@ field_serde_name ; path) => { "path" } ; (@ field_serde_name ; is_favourite) => { "is_favourite" } ; (@ field_serde_name ; num_of_keys) => { "num_of_keys" } ; (@ field_serde_name ; num_of_untranslated_keys) => { "num_of_untranslated_keys" } ; (@ field_serde_name ; added_at) => { "added_at" } ; (@ specta_data_struct ; $ struct : item ;) => { # [allow (warnings)] # [derive (std :: fmt :: Debug , Clone)] # [derive (:: prisma_client_rust :: specta :: Type)] # [specta (rename_from_path = SPECTA_TYPE_NAME , crate = "prisma_client_rust::specta")] # [specta (inline)] $ struct } ; (@ specta_data_struct ; $ struct : item ; $ name : ident) => { # [allow (warnings)] # [derive (std :: fmt :: Debug , Clone)] # [derive (:: prisma_client_rust :: specta :: Type)] # [specta (rename_from_path = SPECTA_TYPE_NAME , crate = "prisma_client_rust::specta")] $ struct } ; }
    pub use _select_location as select;
    pub enum SelectParam {
        Id(id::Select),
        Tag(tag::Select),
        Name(name::Select),
        Path(path::Select),
        IsFavourite(is_favourite::Select),
        NumOfKeys(num_of_keys::Select),
        NumOfUntranslatedKeys(num_of_untranslated_keys::Select),
        AddedAt(added_at::Select),
    }
    impl SelectParam {
        pub fn to_selection(self) -> ::prisma_client_rust::Selection {
            match self {
                Self::Id(data) => data.to_selection(),
                Self::Tag(data) => data.to_selection(),
                Self::Name(data) => data.to_selection(),
                Self::Path(data) => data.to_selection(),
                Self::IsFavourite(data) => data.to_selection(),
                Self::NumOfKeys(data) => data.to_selection(),
                Self::NumOfUntranslatedKeys(data) => data.to_selection(),
                Self::AddedAt(data) => data.to_selection(),
            }
        }
    }
    #[macro_export]
    macro_rules ! _include_location { ($ (($ ($ func_arg : ident : $ func_arg_ty : ty) , +) =>) ? $ module_name : ident { $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { # [allow (warnings)] pub mod $ module_name { crate :: prisma :: location :: include ! (@ definitions ; $ module_name ; $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) +) ; use super :: * ; pub struct Selection (Vec < :: prisma_client_rust :: Selection >) ; impl :: prisma_client_rust :: IncludeType for Selection { type Data = Data ; type ModelData = crate :: prisma :: location :: Data ; fn to_selections (self) -> Vec < :: prisma_client_rust :: Selection > { self . 0 } } pub fn include ($ ($ ($ func_arg : $ func_arg_ty) , +) ?) -> Selection { Selection ([crate :: prisma :: location :: include ! (@ selections_to_params ; : include { $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) + }) . into_iter () . map (| p | p . to_selection ()) . collect :: < Vec < _ >> () , < crate :: prisma :: location :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections ()] . into_iter () . flatten () . collect :: < Vec < _ >> ()) } } } ; ({ $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { { crate :: prisma :: location :: include ! (@ definitions ; ; $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) +) ; pub struct Selection (Vec < :: prisma_client_rust :: Selection >) ; impl :: prisma_client_rust :: IncludeType for Selection { type Data = Data ; type ModelData = crate :: prisma :: location :: Data ; fn to_selections (self) -> Vec < :: prisma_client_rust :: Selection > { self . 0 } } Selection ([crate :: prisma :: location :: include ! (@ selections_to_params ; : include { $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) + }) . into_iter () . map (| p | p . to_selection ()) . collect :: < Vec < _ >> () , < crate :: prisma :: location :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections ()] . into_iter () . flatten () . collect :: < Vec < _ >> ()) } } ; (@ definitions ; $ ($ module_name : ident) ? ; $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) +) => { # [allow (warnings)] enum Fields { } # [allow (warnings)] impl Fields { fn selections () { $ (let _ = Fields :: $ field ;) + } } const SPECTA_TYPE_NAME : & 'static str = prisma_client_rust :: macros :: to_pascal_case ! ($ ($ module_name) ?) ; crate :: prisma :: location :: include ! (@ specta_data_struct ; pub struct Data { # [specta (rename_from_path = crate :: prisma :: location :: id :: NAME)] pub id : i32 , # [specta (rename_from_path = crate :: prisma :: location :: tag :: NAME)] pub tag : String , # [specta (rename_from_path = crate :: prisma :: location :: name :: NAME)] pub name : String , # [specta (rename_from_path = crate :: prisma :: location :: path :: NAME)] pub path : String , # [specta (rename_from_path = crate :: prisma :: location :: is_favourite :: NAME)] pub is_favourite : bool , # [specta (rename_from_path = crate :: prisma :: location :: num_of_keys :: NAME)] pub num_of_keys : i32 , # [specta (rename_from_path = crate :: prisma :: location :: num_of_untranslated_keys :: NAME)] pub num_of_untranslated_keys : i32 , # [specta (rename_from_path = crate :: prisma :: location :: added_at :: NAME)] pub added_at : String , $ (# [specta (rename_from_path = crate :: prisma :: location :: $ field :: NAME)] pub $ field : crate :: prisma :: location :: include ! (@ field_type ; $ field $ (: $ selection_mode { $ ($ selections) + }) ?) ,) + } ; $ ($ module_name) ?) ; impl :: serde :: Serialize for Data { fn serialize < S > (& self , serializer : S) -> Result < S :: Ok , S :: Error > where S : :: serde :: Serializer , { use :: serde :: ser :: SerializeStruct ; let mut state = serializer . serialize_struct ("Data" , [$ (stringify ! ($ field) ,) + stringify ! (id) , stringify ! (tag) , stringify ! (name) , stringify ! (path) , stringify ! (is_favourite) , stringify ! (num_of_keys) , stringify ! (num_of_untranslated_keys) , stringify ! (added_at)] . len ()) ? ; $ (state . serialize_field (crate :: prisma :: location :: $ field :: NAME , & self . $ field) ? ;) * state . serialize_field (crate :: prisma :: location :: id :: NAME , & self . id) ? ; state . serialize_field (crate :: prisma :: location :: tag :: NAME , & self . tag) ? ; state . serialize_field (crate :: prisma :: location :: name :: NAME , & self . name) ? ; state . serialize_field (crate :: prisma :: location :: path :: NAME , & self . path) ? ; state . serialize_field (crate :: prisma :: location :: is_favourite :: NAME , & self . is_favourite) ? ; state . serialize_field (crate :: prisma :: location :: num_of_keys :: NAME , & self . num_of_keys) ? ; state . serialize_field (crate :: prisma :: location :: num_of_untranslated_keys :: NAME , & self . num_of_untranslated_keys) ? ; state . serialize_field (crate :: prisma :: location :: added_at :: NAME , & self . added_at) ? ; state . end () } } impl < 'de > :: serde :: Deserialize < 'de > for Data { fn deserialize < D > (deserializer : D) -> Result < Self , D :: Error > where D : :: serde :: Deserializer < 'de > , { # [allow (warnings)] enum Field { $ ($ field) , + , id , tag , name , path , is_favourite , num_of_keys , num_of_untranslated_keys , added_at } impl < 'de > :: serde :: Deserialize < 'de > for Field { fn deserialize < D > (deserializer : D) -> Result < Field , D :: Error > where D : :: serde :: Deserializer < 'de > , { struct FieldVisitor ; impl < 'de > :: serde :: de :: Visitor < 'de > for FieldVisitor { type Value = Field ; fn expecting (& self , formatter : & mut :: std :: fmt :: Formatter) -> :: std :: fmt :: Result { formatter . write_str (& [$ (crate :: prisma :: location :: $ field :: NAME) , + , crate :: prisma :: location :: id :: NAME , crate :: prisma :: location :: tag :: NAME , crate :: prisma :: location :: name :: NAME , crate :: prisma :: location :: path :: NAME , crate :: prisma :: location :: is_favourite :: NAME , crate :: prisma :: location :: num_of_keys :: NAME , crate :: prisma :: location :: num_of_untranslated_keys :: NAME , crate :: prisma :: location :: added_at :: NAME] . into_iter () . collect :: < Vec < _ >> () . join (", ")) } fn visit_str < E > (self , value : & str) -> Result < Field , E > where E : :: serde :: de :: Error , { match value { $ (crate :: prisma :: location :: $ field :: NAME => Ok (Field :: $ field)) , * , crate :: prisma :: location :: id :: NAME => Ok (Field :: id) , crate :: prisma :: location :: tag :: NAME => Ok (Field :: tag) , crate :: prisma :: location :: name :: NAME => Ok (Field :: name) , crate :: prisma :: location :: path :: NAME => Ok (Field :: path) , crate :: prisma :: location :: is_favourite :: NAME => Ok (Field :: is_favourite) , crate :: prisma :: location :: num_of_keys :: NAME => Ok (Field :: num_of_keys) , crate :: prisma :: location :: num_of_untranslated_keys :: NAME => Ok (Field :: num_of_untranslated_keys) , crate :: prisma :: location :: added_at :: NAME => Ok (Field :: added_at) , _ => Err (:: serde :: de :: Error :: unknown_field (value , FIELDS)) , } } } deserializer . deserialize_identifier (FieldVisitor) } } struct DataVisitor ; impl < 'de > :: serde :: de :: Visitor < 'de > for DataVisitor { type Value = Data ; fn expecting (& self , formatter : & mut std :: fmt :: Formatter) -> std :: fmt :: Result { formatter . write_str ("struct Data") } fn visit_map < V > (self , mut map : V) -> Result < Data , V :: Error > where V : :: serde :: de :: MapAccess < 'de > , { $ (let mut $ field = None ;) * let mut id = None ; let mut tag = None ; let mut name = None ; let mut path = None ; let mut is_favourite = None ; let mut num_of_keys = None ; let mut num_of_untranslated_keys = None ; let mut added_at = None ; while let Some (key) = map . next_key () ? { match key { Field :: id => { if id . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: location :: id :: NAME)) ; } id = Some (map . next_value () ?) ; } Field :: tag => { if tag . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: location :: tag :: NAME)) ; } tag = Some (map . next_value () ?) ; } Field :: name => { if name . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: location :: name :: NAME)) ; } name = Some (map . next_value () ?) ; } Field :: path => { if path . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: location :: path :: NAME)) ; } path = Some (map . next_value () ?) ; } Field :: is_favourite => { if is_favourite . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: location :: is_favourite :: NAME)) ; } is_favourite = Some (map . next_value () ?) ; } Field :: num_of_keys => { if num_of_keys . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: location :: num_of_keys :: NAME)) ; } num_of_keys = Some (map . next_value () ?) ; } Field :: num_of_untranslated_keys => { if num_of_untranslated_keys . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: location :: num_of_untranslated_keys :: NAME)) ; } num_of_untranslated_keys = Some (map . next_value () ?) ; } Field :: added_at => { if added_at . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: location :: added_at :: NAME)) ; } added_at = Some (map . next_value () ?) ; } $ (Field :: $ field => { if $ field . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: location :: $ field :: NAME)) ; } $ field = Some (map . next_value () ?) ; }) * } } $ (let $ field = $ field . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: location :: $ field :: NAME)) ? ;) * let id = id . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: location :: id :: NAME)) ? ; let tag = tag . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: location :: tag :: NAME)) ? ; let name = name . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: location :: name :: NAME)) ? ; let path = path . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: location :: path :: NAME)) ? ; let is_favourite = is_favourite . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: location :: is_favourite :: NAME)) ? ; let num_of_keys = num_of_keys . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: location :: num_of_keys :: NAME)) ? ; let num_of_untranslated_keys = num_of_untranslated_keys . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: location :: num_of_untranslated_keys :: NAME)) ? ; let added_at = added_at . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: location :: added_at :: NAME)) ? ; Ok (Data { id , tag , name , path , is_favourite , num_of_keys , num_of_untranslated_keys , added_at , $ ($ field) , * }) } } const FIELDS : & 'static [& 'static str] = & ["id" , "tag" , "name" , "path" , "is_favourite" , "num_of_keys" , "num_of_untranslated_keys" , "added_at"] ; deserializer . deserialize_struct ("Data" , FIELDS , DataVisitor) } } $ ($ (pub mod $ field { crate :: prisma :: location :: $ selection_mode ! (@ field_module ; $ field : $ selection_mode { $ ($ selections) + }) ; }) ?) + } ; (@ field_type ; $ field : ident $ ($ tokens : tt) *) => { compile_error ! (stringify ! (Cannot include nonexistent relation $ field on model "Location" , available relations are "")) } ; (@ field_module ; $ ($ tokens : tt) *) => { } ; (@ selection_field_to_selection_param ; $ ($ tokens : tt) *) => { compile_error ! (stringify ! ($ ($ tokens) *)) } ; (@ selections_to_params ; : $ macro_name : ident { $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { [$ (crate :: prisma :: location :: $ macro_name ! (@ selection_field_to_selection_param ; $ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) ,) +] } ; (@ filters_to_args ;) => { vec ! [] } ; (@ filters_to_args ; $ ($ t : tt) *) => { $ ($ t) * } ; (@ field_serde_name ; id) => { "id" } ; (@ field_serde_name ; tag) => { "tag" } ; (@ field_serde_name ; name) => { "name" } ; (@ field_serde_name ; path) => { "path" } ; (@ field_serde_name ; is_favourite) => { "is_favourite" } ; (@ field_serde_name ; num_of_keys) => { "num_of_keys" } ; (@ field_serde_name ; num_of_untranslated_keys) => { "num_of_untranslated_keys" } ; (@ field_serde_name ; added_at) => { "added_at" } ; (@ specta_data_struct ; $ struct : item ;) => { # [allow (warnings)] # [derive (std :: fmt :: Debug , Clone)] # [derive (:: prisma_client_rust :: specta :: Type)] # [specta (rename_from_path = SPECTA_TYPE_NAME , crate = "prisma_client_rust::specta")] # [specta (inline)] $ struct } ; (@ specta_data_struct ; $ struct : item ; $ name : ident) => { # [allow (warnings)] # [derive (std :: fmt :: Debug , Clone)] # [derive (:: prisma_client_rust :: specta :: Type)] # [specta (rename_from_path = SPECTA_TYPE_NAME , crate = "prisma_client_rust::specta")] $ struct } ; }
    pub use _include_location as include;
    pub enum IncludeParam {
        Id(id::Include),
        Tag(tag::Include),
        Name(name::Include),
        Path(path::Include),
        IsFavourite(is_favourite::Include),
        NumOfKeys(num_of_keys::Include),
        NumOfUntranslatedKeys(num_of_untranslated_keys::Include),
        AddedAt(added_at::Include),
    }
    impl IncludeParam {
        pub fn to_selection(self) -> ::prisma_client_rust::Selection {
            match self {
                Self::Id(data) => data.to_selection(),
                Self::Tag(data) => data.to_selection(),
                Self::Name(data) => data.to_selection(),
                Self::Path(data) => data.to_selection(),
                Self::IsFavourite(data) => data.to_selection(),
                Self::NumOfKeys(data) => data.to_selection(),
                Self::NumOfUntranslatedKeys(data) => data.to_selection(),
                Self::AddedAt(data) => data.to_selection(),
            }
        }
    }
    #[macro_export]
    macro_rules ! _partial_unchecked_location { ($ struct_name : ident { $ ($ scalar_field : ident) + }) => { :: prisma_client_rust :: macros :: partial_unchecked ! { crate :: prisma :: location struct $ struct_name { # [serde (rename = "id")] pub id : i32 , # [serde (rename = "tag")] pub tag : String , # [serde (rename = "name")] pub name : String , # [serde (rename = "path")] pub path : String , # [serde (rename = "is_favourite")] pub is_favourite : bool , # [serde (rename = "num_of_keys")] pub num_of_keys : i32 , # [serde (rename = "num_of_untranslated_keys")] pub num_of_untranslated_keys : i32 , # [serde (rename = "added_at")] pub added_at : String } [$ ($ scalar_field) , +] } } ; }
    pub use _partial_unchecked_location as partial_unchecked;
    #[derive(
        Debug,
        Clone,
        :: serde :: Serialize,
        :: serde :: Deserialize,
        :: prisma_client_rust :: specta :: Type,
    )]
    #[specta(rename = "Location", crate = "prisma_client_rust::specta")]
    pub struct Data {
        #[serde(rename = "id")]
        pub id: i32,
        #[serde(rename = "tag")]
        pub tag: String,
        #[serde(rename = "name")]
        pub name: String,
        #[serde(rename = "path")]
        pub path: String,
        #[serde(rename = "is_favourite")]
        pub is_favourite: bool,
        #[serde(rename = "num_of_keys")]
        pub num_of_keys: i32,
        #[serde(rename = "num_of_untranslated_keys")]
        pub num_of_untranslated_keys: i32,
        #[serde(rename = "added_at")]
        pub added_at: String,
    }
    impl Data {}
    #[derive(Clone)]
    pub enum WithParam {}
    impl Into<::prisma_client_rust::Selection> for WithParam {
        fn into(self) -> ::prisma_client_rust::Selection {
            match self {}
        }
    }
    #[derive(Clone)]
    pub enum SetParam {
        SetId(i32),
        IncrementId(i32),
        DecrementId(i32),
        MultiplyId(i32),
        DivideId(i32),
        SetTag(String),
        SetName(String),
        SetPath(String),
        SetIsFavourite(bool),
        SetNumOfKeys(i32),
        IncrementNumOfKeys(i32),
        DecrementNumOfKeys(i32),
        MultiplyNumOfKeys(i32),
        DivideNumOfKeys(i32),
        SetNumOfUntranslatedKeys(i32),
        IncrementNumOfUntranslatedKeys(i32),
        DecrementNumOfUntranslatedKeys(i32),
        MultiplyNumOfUntranslatedKeys(i32),
        DivideNumOfUntranslatedKeys(i32),
        SetAddedAt(String),
    }
    impl From<SetParam> for (String, ::prisma_client_rust::PrismaValue) {
        fn from(param: SetParam) -> Self {
            match param {
                SetParam::SetId(value) => (
                    id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Int(value as i64),
                ),
                SetParam::IncrementId(value) => (
                    id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "increment".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::DecrementId(value) => (
                    id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "decrement".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::MultiplyId(value) => (
                    id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "multiply".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::DivideId(value) => (
                    id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "divide".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::SetTag(value) => (
                    tag::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(value),
                ),
                SetParam::SetName(value) => (
                    name::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(value),
                ),
                SetParam::SetPath(value) => (
                    path::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(value),
                ),
                SetParam::SetIsFavourite(value) => (
                    is_favourite::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Boolean(value),
                ),
                SetParam::SetNumOfKeys(value) => (
                    num_of_keys::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Int(value as i64),
                ),
                SetParam::IncrementNumOfKeys(value) => (
                    num_of_keys::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "increment".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::DecrementNumOfKeys(value) => (
                    num_of_keys::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "decrement".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::MultiplyNumOfKeys(value) => (
                    num_of_keys::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "multiply".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::DivideNumOfKeys(value) => (
                    num_of_keys::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "divide".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::SetNumOfUntranslatedKeys(value) => (
                    num_of_untranslated_keys::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Int(value as i64),
                ),
                SetParam::IncrementNumOfUntranslatedKeys(value) => (
                    num_of_untranslated_keys::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "increment".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::DecrementNumOfUntranslatedKeys(value) => (
                    num_of_untranslated_keys::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "decrement".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::MultiplyNumOfUntranslatedKeys(value) => (
                    num_of_untranslated_keys::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "multiply".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::DivideNumOfUntranslatedKeys(value) => (
                    num_of_untranslated_keys::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "divide".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::SetAddedAt(value) => (
                    added_at::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(value),
                ),
            }
        }
    }
    #[derive(Clone)]
    pub enum UncheckedSetParam {
        Id(i32),
        Tag(String),
        Name(String),
        Path(String),
        IsFavourite(bool),
        NumOfKeys(i32),
        NumOfUntranslatedKeys(i32),
        AddedAt(String),
    }
    impl From<UncheckedSetParam> for SetParam {
        fn from(param: UncheckedSetParam) -> Self {
            match param {
                UncheckedSetParam::Id(value) => Self::SetId(value),
                UncheckedSetParam::Tag(value) => Self::SetTag(value),
                UncheckedSetParam::Name(value) => Self::SetName(value),
                UncheckedSetParam::Path(value) => Self::SetPath(value),
                UncheckedSetParam::IsFavourite(value) => Self::SetIsFavourite(value),
                UncheckedSetParam::NumOfKeys(value) => Self::SetNumOfKeys(value),
                UncheckedSetParam::NumOfUntranslatedKeys(value) => {
                    Self::SetNumOfUntranslatedKeys(value)
                }
                UncheckedSetParam::AddedAt(value) => Self::SetAddedAt(value),
            }
        }
    }
    #[derive(Clone)]
    pub enum OrderByParam {
        Id(::prisma_client_rust::Direction),
        Tag(::prisma_client_rust::Direction),
        Name(::prisma_client_rust::Direction),
        Path(::prisma_client_rust::Direction),
        IsFavourite(::prisma_client_rust::Direction),
        NumOfKeys(::prisma_client_rust::Direction),
        NumOfUntranslatedKeys(::prisma_client_rust::Direction),
        AddedAt(::prisma_client_rust::Direction),
    }
    impl Into<(String, ::prisma_client_rust::PrismaValue)> for OrderByParam {
        fn into(self) -> (String, ::prisma_client_rust::PrismaValue) {
            match self {
                Self::Id(direction) => (
                    id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
                Self::Tag(direction) => (
                    tag::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
                Self::Name(direction) => (
                    name::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
                Self::Path(direction) => (
                    path::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
                Self::IsFavourite(direction) => (
                    is_favourite::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
                Self::NumOfKeys(direction) => (
                    num_of_keys::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
                Self::NumOfUntranslatedKeys(direction) => (
                    num_of_untranslated_keys::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
                Self::AddedAt(direction) => (
                    added_at::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
            }
        }
    }
    #[derive(Clone)]
    pub enum WhereParam {
        Not(Vec<WhereParam>),
        Or(Vec<WhereParam>),
        And(Vec<WhereParam>),
        Id(_prisma::read_filters::IntFilter),
        Tag(_prisma::read_filters::StringFilter),
        Name(_prisma::read_filters::StringFilter),
        Path(_prisma::read_filters::StringFilter),
        IsFavourite(_prisma::read_filters::BoolFilter),
        NumOfKeys(_prisma::read_filters::IntFilter),
        NumOfUntranslatedKeys(_prisma::read_filters::IntFilter),
        AddedAt(_prisma::read_filters::StringFilter),
    }
    impl ::prisma_client_rust::WhereInput for WhereParam {
        fn serialize(self) -> ::prisma_client_rust::SerializedWhereInput {
            let (name, value) = match self {
                Self::Not(value) => (
                    "NOT",
                    ::prisma_client_rust::SerializedWhereValue::Object(
                        ::prisma_client_rust::merge_fields(
                            value
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(Into::into)
                                .collect(),
                        ),
                    ),
                ),
                Self::Or(value) => (
                    "OR",
                    ::prisma_client_rust::SerializedWhereValue::List(
                        value
                            .into_iter()
                            .map(::prisma_client_rust::WhereInput::serialize)
                            .map(Into::into)
                            .map(|v| vec![v])
                            .map(::prisma_client_rust::PrismaValue::Object)
                            .collect(),
                    ),
                ),
                Self::And(value) => (
                    "AND",
                    ::prisma_client_rust::SerializedWhereValue::Object(
                        ::prisma_client_rust::merge_fields(
                            value
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(Into::into)
                                .collect(),
                        ),
                    ),
                ),
                Self::Id(value) => (id::NAME, value.into()),
                Self::Tag(value) => (tag::NAME, value.into()),
                Self::Name(value) => (name::NAME, value.into()),
                Self::Path(value) => (path::NAME, value.into()),
                Self::IsFavourite(value) => (is_favourite::NAME, value.into()),
                Self::NumOfKeys(value) => (num_of_keys::NAME, value.into()),
                Self::NumOfUntranslatedKeys(value) => {
                    (num_of_untranslated_keys::NAME, value.into())
                }
                Self::AddedAt(value) => (added_at::NAME, value.into()),
            };
            ::prisma_client_rust::SerializedWhereInput::new(name, value.into())
        }
    }
    #[derive(Clone)]
    pub enum UniqueWhereParam {
        NameEquals(String),
        PathEquals(String),
        IdEquals(i32),
    }
    impl From<UniqueWhereParam> for WhereParam {
        fn from(value: UniqueWhereParam) -> Self {
            match value {
                UniqueWhereParam::NameEquals(value) => {
                    Self::Name(_prisma::read_filters::StringFilter::Equals(value))
                }
                UniqueWhereParam::PathEquals(value) => {
                    Self::Path(_prisma::read_filters::StringFilter::Equals(value))
                }
                UniqueWhereParam::IdEquals(value) => {
                    Self::Id(_prisma::read_filters::IntFilter::Equals(value))
                }
            }
        }
    }
    impl From<::prisma_client_rust::Operator<Self>> for WhereParam {
        fn from(op: ::prisma_client_rust::Operator<Self>) -> Self {
            match op {
                ::prisma_client_rust::Operator::Not(value) => Self::Not(value),
                ::prisma_client_rust::Operator::And(value) => Self::And(value),
                ::prisma_client_rust::Operator::Or(value) => Self::Or(value),
            }
        }
    }
    #[derive(Clone)]
    pub struct Types;
    impl ::prisma_client_rust::ModelTypes for Types {
        type Data = Data;
        type Where = WhereParam;
        type UncheckedSet = UncheckedSetParam;
        type Set = SetParam;
        type With = WithParam;
        type OrderBy = OrderByParam;
        type Cursor = UniqueWhereParam;
        const MODEL: &'static str = NAME;
        fn scalar_selections() -> Vec<::prisma_client_rust::Selection> {
            vec![
                ::prisma_client_rust::sel(id::NAME),
                ::prisma_client_rust::sel(tag::NAME),
                ::prisma_client_rust::sel(name::NAME),
                ::prisma_client_rust::sel(path::NAME),
                ::prisma_client_rust::sel(is_favourite::NAME),
                ::prisma_client_rust::sel(num_of_keys::NAME),
                ::prisma_client_rust::sel(num_of_untranslated_keys::NAME),
                ::prisma_client_rust::sel(added_at::NAME),
            ]
        }
    }
    pub type UniqueArgs = ::prisma_client_rust::UniqueArgs<Types>;
    pub type ManyArgs = ::prisma_client_rust::ManyArgs<Types>;
    pub type Count<'a> = ::prisma_client_rust::Count<'a, Types>;
    pub type Create<'a> = ::prisma_client_rust::Create<'a, Types>;
    pub type CreateMany<'a> = ::prisma_client_rust::CreateMany<'a, Types>;
    pub type FindUnique<'a> = ::prisma_client_rust::FindUnique<'a, Types>;
    pub type FindMany<'a> = ::prisma_client_rust::FindMany<'a, Types>;
    pub type FindFirst<'a> = ::prisma_client_rust::FindFirst<'a, Types>;
    pub type Update<'a> = ::prisma_client_rust::Update<'a, Types>;
    pub type UpdateMany<'a> = ::prisma_client_rust::UpdateMany<'a, Types>;
    pub type Upsert<'a> = ::prisma_client_rust::Upsert<'a, Types>;
    pub type Delete<'a> = ::prisma_client_rust::Delete<'a, Types>;
    pub type DeleteMany<'a> = ::prisma_client_rust::DeleteMany<'a, Types>;
    #[derive(Clone)]
    pub struct Actions<'a> {
        pub client: &'a ::prisma_client_rust::PrismaClientInternals,
    }
    impl<'a> Actions<'a> {
        pub fn find_unique(self, _where: UniqueWhereParam) -> FindUnique<'a> {
            FindUnique::new(self.client, _where.into())
        }
        pub fn find_first(self, _where: Vec<WhereParam>) -> FindFirst<'a> {
            FindFirst::new(self.client, _where)
        }
        pub fn find_many(self, _where: Vec<WhereParam>) -> FindMany<'a> {
            FindMany::new(self.client, _where)
        }
        pub fn create(
            self,
            tag: String,
            name: String,
            path: String,
            num_of_keys: i32,
            num_of_untranslated_keys: i32,
            added_at: String,
            mut _params: Vec<SetParam>,
        ) -> Create<'a> {
            _params.extend([
                tag::set(tag),
                name::set(name),
                path::set(path),
                num_of_keys::set(num_of_keys),
                num_of_untranslated_keys::set(num_of_untranslated_keys),
                added_at::set(added_at),
            ]);
            Create::new(self.client, _params)
        }
        pub fn create_unchecked(
            self,
            tag: String,
            name: String,
            path: String,
            num_of_keys: i32,
            num_of_untranslated_keys: i32,
            added_at: String,
            mut _params: Vec<UncheckedSetParam>,
        ) -> Create<'a> {
            _params.extend([
                tag::set(tag),
                name::set(name),
                path::set(path),
                num_of_keys::set(num_of_keys),
                num_of_untranslated_keys::set(num_of_untranslated_keys),
                added_at::set(added_at),
            ]);
            Create::new(self.client, _params.into_iter().map(Into::into).collect())
        }
        pub fn update(self, _where: UniqueWhereParam, _params: Vec<SetParam>) -> Update<'a> {
            Update::new(self.client, _where.into(), _params, vec![])
        }
        pub fn update_unchecked(
            self,
            _where: UniqueWhereParam,
            _params: Vec<UncheckedSetParam>,
        ) -> Update<'a> {
            Update::new(
                self.client,
                _where.into(),
                _params.into_iter().map(Into::into).collect(),
                vec![],
            )
        }
        pub fn update_many(
            self,
            _where: Vec<WhereParam>,
            _params: Vec<SetParam>,
        ) -> UpdateMany<'a> {
            UpdateMany::new(self.client, _where, _params)
        }
        pub fn upsert(
            self,
            _where: UniqueWhereParam,
            (tag, name, path, num_of_keys, num_of_untranslated_keys, added_at, mut _params): (
                String,
                String,
                String,
                i32,
                i32,
                String,
                Vec<SetParam>,
            ),
            _update: Vec<SetParam>,
        ) -> Upsert<'a> {
            _params.extend([
                tag::set(tag),
                name::set(name),
                path::set(path),
                num_of_keys::set(num_of_keys),
                num_of_untranslated_keys::set(num_of_untranslated_keys),
                added_at::set(added_at),
            ]);
            Upsert::new(self.client, _where.into(), _params, _update)
        }
        pub fn delete(self, _where: UniqueWhereParam) -> Delete<'a> {
            Delete::new(self.client, _where.into(), vec![])
        }
        pub fn delete_many(self, _where: Vec<WhereParam>) -> DeleteMany<'a> {
            DeleteMany::new(self.client, _where)
        }
        pub fn count(self, _where: Vec<WhereParam>) -> Count<'a> {
            Count::new(self.client, _where)
        }
        pub fn find_raw<T: ::prisma_client_rust::Data>(
            self,
        ) -> ::prisma_client_rust::FindRaw<'a, Types, T> {
            ::prisma_client_rust::FindRaw::new(self.client)
        }
        pub fn aggregate_raw<T: ::prisma_client_rust::Data>(
            self,
        ) -> ::prisma_client_rust::AggregateRaw<'a, Types, T> {
            ::prisma_client_rust::AggregateRaw::new(self.client)
        }
    }
}
pub mod _prisma {
    pub struct PrismaClientBuilder {
        url: Option<String>,
        action_notifier: ::prisma_client_rust::ActionNotifier,
    }
    impl PrismaClientBuilder {
        fn new() -> Self {
            Self {
                url: None,
                action_notifier: ::prisma_client_rust::ActionNotifier::new(),
            }
        }
        pub fn with_url(mut self, url: String) -> Self {
            self.url = Some(url);
            self
        }
        pub async fn build(self) -> Result<PrismaClient, ::prisma_client_rust::NewClientError> {
            let internals = ::prisma_client_rust::PrismaClientInternals::new(
                self.url,
                self.action_notifier,
                super::DATAMODEL_STR,
            )
            .await?;
            Ok(PrismaClient(internals))
        }
    }
    pub struct PrismaClient(::prisma_client_rust::PrismaClientInternals);
    impl ::std::fmt::Debug for PrismaClient {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.debug_struct("PrismaClient").finish()
        }
    }
    impl PrismaClient {
        pub fn _builder() -> PrismaClientBuilder {
            PrismaClientBuilder::new()
        }
        pub fn _query_raw<T: ::prisma_client_rust::Data>(
            &self,
            query: ::prisma_client_rust::Raw,
        ) -> ::prisma_client_rust::QueryRaw<T> {
            ::prisma_client_rust::QueryRaw::new(&self.0, query, super::DATABASE_STR)
        }
        pub fn _execute_raw(
            &self,
            query: ::prisma_client_rust::Raw,
        ) -> ::prisma_client_rust::ExecuteRaw {
            ::prisma_client_rust::ExecuteRaw::new(&self.0, query, super::DATABASE_STR)
        }
        pub async fn _batch<
            'batch,
            T: ::prisma_client_rust::BatchContainer<'batch, Marker>,
            Marker,
        >(
            &self,
            queries: T,
        ) -> ::prisma_client_rust::Result<
            <T as ::prisma_client_rust::BatchContainer<'batch, Marker>>::ReturnType,
        > {
            ::prisma_client_rust::batch(queries, &self.0).await
        }
        pub fn _transaction(&self) -> ::prisma_client_rust::TransactionBuilder<Self> {
            ::prisma_client_rust::TransactionBuilder::_new(self, &self.0)
        }
        pub async fn _migrate_deploy(
            &self,
        ) -> Result<(), ::prisma_client_rust::migrations::MigrateDeployError> {
            let res = ::prisma_client_rust::migrations::migrate_deploy(
                super::DATAMODEL_STR,
                super::MIGRATIONS_DIR,
                &self.0.url(),
            )
            .await;
            ::prisma_client_rust::tokio::time::sleep(core::time::Duration::from_millis(1)).await;
            res
        }
        pub async fn _migrate_resolve(
            &self,
            migration: &str,
        ) -> Result<(), ::prisma_client_rust::migrations::MigrateResolveError> {
            ::prisma_client_rust::migrations::migrate_resolve(
                migration,
                super::DATAMODEL_STR,
                super::MIGRATIONS_DIR,
                &self.0.url(),
            )
            .await
        }
        pub fn _db_push(&self) -> ::prisma_client_rust::migrations::DbPush {
            ::prisma_client_rust::migrations::db_push(super::DATAMODEL_STR, &self.0.url())
        }
        pub fn settings(&self) -> super::settings::Actions {
            super::settings::Actions { client: &self.0 }
        }
        pub fn location(&self) -> super::location::Actions {
            super::location::Actions { client: &self.0 }
        }
    }
    impl ::prisma_client_rust::PrismaClient for PrismaClient {
        fn internals(&self) -> &::prisma_client_rust::PrismaClientInternals {
            &self.0
        }
        fn internals_mut(&mut self) -> &mut ::prisma_client_rust::PrismaClientInternals {
            &mut self.0
        }
        fn with_tx_id(&self, tx_id: Option<::prisma_client_rust::query_core::TxId>) -> Self {
            Self(self.0.with_tx_id(tx_id))
        }
    }
    #[derive(Debug, Clone, Copy, :: serde :: Serialize, :: serde :: Deserialize, PartialEq, Eq)]
    pub enum LocationScalarFieldEnum {
        #[serde(rename = "id")]
        Id,
        #[serde(rename = "tag")]
        Tag,
        #[serde(rename = "name")]
        Name,
        #[serde(rename = "path")]
        Path,
        #[serde(rename = "is_favourite")]
        IsFavourite,
        #[serde(rename = "num_of_keys")]
        NumOfKeys,
        #[serde(rename = "num_of_untranslated_keys")]
        NumOfUntranslatedKeys,
        #[serde(rename = "added_at")]
        AddedAt,
    }
    impl ToString for LocationScalarFieldEnum {
        fn to_string(&self) -> String {
            match self {
                Self::Id => "id".to_string(),
                Self::Tag => "tag".to_string(),
                Self::Name => "name".to_string(),
                Self::Path => "path".to_string(),
                Self::IsFavourite => "is_favourite".to_string(),
                Self::NumOfKeys => "num_of_keys".to_string(),
                Self::NumOfUntranslatedKeys => "num_of_untranslated_keys".to_string(),
                Self::AddedAt => "added_at".to_string(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, :: serde :: Serialize, :: serde :: Deserialize, PartialEq, Eq)]
    pub enum SettingsScalarFieldEnum {
        #[serde(rename = "id")]
        Id,
        #[serde(rename = "nav_open")]
        NavOpen,
        #[serde(rename = "theme")]
        Theme,
        #[serde(rename = "notifications_enabled")]
        NotificationsEnabled,
        #[serde(rename = "toast_rich_colors")]
        ToastRichColors,
        #[serde(rename = "notification_file_changes")]
        NotificationFileChanges,
        #[serde(rename = "notification_finished_translation")]
        NotificationFinishedTranslation,
        #[serde(rename = "finished_scan")]
        FinishedScan,
        #[serde(rename = "translate_new_strings")]
        TranslateNewStrings,
        #[serde(rename = "translate_updated_strings")]
        TranslateUpdatedStrings,
        #[serde(rename = "default_language")]
        DefaultLanguage,
        #[serde(rename = "translation_command")]
        TranslationCommand,
        #[serde(rename = "home_default_size_nav")]
        HomeDefaultSizeNav,
        #[serde(rename = "home_default_size_home")]
        HomeDefaultSizeHome,
        #[serde(rename = "home_nav_collapsed")]
        HomeNavCollapsed,
        #[serde(rename = "home_collapsed_nav_size")]
        HomeCollapsedNavSize,
    }
    impl ToString for SettingsScalarFieldEnum {
        fn to_string(&self) -> String {
            match self {
                Self::Id => "id".to_string(),
                Self::NavOpen => "nav_open".to_string(),
                Self::Theme => "theme".to_string(),
                Self::NotificationsEnabled => "notifications_enabled".to_string(),
                Self::ToastRichColors => "toast_rich_colors".to_string(),
                Self::NotificationFileChanges => "notification_file_changes".to_string(),
                Self::NotificationFinishedTranslation => {
                    "notification_finished_translation".to_string()
                }
                Self::FinishedScan => "finished_scan".to_string(),
                Self::TranslateNewStrings => "translate_new_strings".to_string(),
                Self::TranslateUpdatedStrings => "translate_updated_strings".to_string(),
                Self::DefaultLanguage => "default_language".to_string(),
                Self::TranslationCommand => "translation_command".to_string(),
                Self::HomeDefaultSizeNav => "home_default_size_nav".to_string(),
                Self::HomeDefaultSizeHome => "home_default_size_home".to_string(),
                Self::HomeNavCollapsed => "home_nav_collapsed".to_string(),
                Self::HomeCollapsedNavSize => "home_collapsed_nav_size".to_string(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, :: serde :: Serialize, :: serde :: Deserialize, PartialEq, Eq)]
    pub enum SortOrder {
        #[serde(rename = "asc")]
        Asc,
        #[serde(rename = "desc")]
        Desc,
    }
    impl ToString for SortOrder {
        fn to_string(&self) -> String {
            match self {
                Self::Asc => "asc".to_string(),
                Self::Desc => "desc".to_string(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, :: serde :: Serialize, :: serde :: Deserialize, PartialEq, Eq)]
    pub enum TransactionIsolationLevel {
        #[serde(rename = "Serializable")]
        Serializable,
    }
    impl ToString for TransactionIsolationLevel {
        fn to_string(&self) -> String {
            match self {
                Self::Serializable => "Serializable".to_string(),
            }
        }
    }
    impl ::prisma_client_rust::TransactionIsolationLevel for TransactionIsolationLevel {}
    pub mod read_filters {
        #[derive(Clone)]
        pub enum IntFilter {
            Equals(i32),
            InVec(Vec<i32>),
            NotInVec(Vec<i32>),
            Lt(i32),
            Lte(i32),
            Gt(i32),
            Gte(i32),
            Not(i32),
        }
        impl Into<::prisma_client_rust::SerializedWhereValue> for IntFilter {
            fn into(self) -> ::prisma_client_rust::SerializedWhereValue {
                match self {
                    Self::Equals(value) => {
                        ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                            "equals".to_string(),
                            ::prisma_client_rust::PrismaValue::Int(value as i64),
                        )])
                    }
                    Self::InVec(value) => {
                        ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                            "in".to_string(),
                            ::prisma_client_rust::PrismaValue::List(
                                value
                                    .into_iter()
                                    .map(|value| {
                                        ::prisma_client_rust::PrismaValue::Int(value as i64)
                                    })
                                    .collect(),
                            ),
                        )])
                    }
                    Self::NotInVec(value) => {
                        ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                            "notIn".to_string(),
                            ::prisma_client_rust::PrismaValue::List(
                                value
                                    .into_iter()
                                    .map(|value| {
                                        ::prisma_client_rust::PrismaValue::Int(value as i64)
                                    })
                                    .collect(),
                            ),
                        )])
                    }
                    Self::Lt(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "lt".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                    Self::Lte(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "lte".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                    Self::Gt(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "gt".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                    Self::Gte(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "gte".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                    Self::Not(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "not".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                }
            }
        }
        #[derive(Clone)]
        pub enum BoolFilter {
            Equals(bool),
            Not(bool),
        }
        impl Into<::prisma_client_rust::SerializedWhereValue> for BoolFilter {
            fn into(self) -> ::prisma_client_rust::SerializedWhereValue {
                match self {
                    Self::Equals(value) => {
                        ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                            "equals".to_string(),
                            ::prisma_client_rust::PrismaValue::Boolean(value),
                        )])
                    }
                    Self::Not(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "not".to_string(),
                        ::prisma_client_rust::PrismaValue::Boolean(value),
                    )]),
                }
            }
        }
        #[derive(Clone)]
        pub enum StringFilter {
            Equals(String),
            InVec(Vec<String>),
            NotInVec(Vec<String>),
            Lt(String),
            Lte(String),
            Gt(String),
            Gte(String),
            Contains(String),
            StartsWith(String),
            EndsWith(String),
            Not(String),
        }
        impl Into<::prisma_client_rust::SerializedWhereValue> for StringFilter {
            fn into(self) -> ::prisma_client_rust::SerializedWhereValue {
                match self {
                    Self::Equals(value) => {
                        ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                            "equals".to_string(),
                            ::prisma_client_rust::PrismaValue::String(value),
                        )])
                    }
                    Self::InVec(value) => {
                        ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                            "in".to_string(),
                            ::prisma_client_rust::PrismaValue::List(
                                value
                                    .into_iter()
                                    .map(|value| ::prisma_client_rust::PrismaValue::String(value))
                                    .collect(),
                            ),
                        )])
                    }
                    Self::NotInVec(value) => {
                        ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                            "notIn".to_string(),
                            ::prisma_client_rust::PrismaValue::List(
                                value
                                    .into_iter()
                                    .map(|value| ::prisma_client_rust::PrismaValue::String(value))
                                    .collect(),
                            ),
                        )])
                    }
                    Self::Lt(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "lt".to_string(),
                        ::prisma_client_rust::PrismaValue::String(value),
                    )]),
                    Self::Lte(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "lte".to_string(),
                        ::prisma_client_rust::PrismaValue::String(value),
                    )]),
                    Self::Gt(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "gt".to_string(),
                        ::prisma_client_rust::PrismaValue::String(value),
                    )]),
                    Self::Gte(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "gte".to_string(),
                        ::prisma_client_rust::PrismaValue::String(value),
                    )]),
                    Self::Contains(value) => {
                        ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                            "contains".to_string(),
                            ::prisma_client_rust::PrismaValue::String(value),
                        )])
                    }
                    Self::StartsWith(value) => {
                        ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                            "startsWith".to_string(),
                            ::prisma_client_rust::PrismaValue::String(value),
                        )])
                    }
                    Self::EndsWith(value) => {
                        ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                            "endsWith".to_string(),
                            ::prisma_client_rust::PrismaValue::String(value),
                        )])
                    }
                    Self::Not(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "not".to_string(),
                        ::prisma_client_rust::PrismaValue::String(value),
                    )]),
                }
            }
        }
    }
}
pub use _prisma::*;
